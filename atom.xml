<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Essay_Han Xiongwei</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-06T17:31:57.412Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Han Xiongwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>First Website Design</title>
    <link href="http://yoursite.com/2018/01/06/First-Website-Design/"/>
    <id>http://yoursite.com/2018/01/06/First-Website-Design/</id>
    <published>2018-01-06T03:15:08.000Z</published>
    <updated>2018-01-06T17:31:57.412Z</updated>
    
    <content type="html"><![CDATA[<p>这是我第一次一个人单独设计并开发一个网站，需求来源大致是研究生团队的老师们希望能拥有一个团队展示平台，用以对外宣传。而调研中发现外包的费用较高，就在群里询问是否有学生感兴趣，刚好那段时间所写论文的实验结果一直难以有提升，并想到本科时用C#独立开发过一个信息系统，就揽下了这活儿，赚点外快，却没想到前前后后还是很多坑，但最后还是坚持的落实了需求。虽然我自己后来的发展方向也不与信息系统相关，但这份经历算是我17年的成果之一，故借此机会，对其好好做个总结。对于一个之前从未接触PHP、MySQL的我来说，心中的信念就是“逢山开路，遇水搭桥！”亦或是“知知为知知，不知百度知，百度不知谷歌知！”这份总结我也会分享很多技术干活，相信阅读完后对搭建系统就不再那么神秘了。</p><a id="more"></a><h1 id="系统介绍"><a href="#系统介绍" class="headerlink" title="系统介绍"></a>系统介绍</h1><p>既然要吹牛逼，当然是先上图，网站链接是<a href="http://msor-world.com/" target="_blank" rel="external">HUST OI Team</a>，因开发时间零散，故两个多月才完成交付。系统的前、后台界面如下（因为网站采用响应式前端框架，手机上浏览界面更佳！）：</p><p><img src="/2018/01/06/First-Website-Design/front_page.png" alt="The front page of website"></p><p>后台界面是方便管理员管理网站信息的（成员、新闻、成果等）</p><p><img src="/2018/01/06/First-Website-Design/behind_page.png" alt="The behind page of website"></p><p>用一句话来描述我开发的网站：“搭建了一套基于Bootstrap+PHP+MySQL的响应式CMS”</p><blockquote><p><strong>补充：</strong>很多人可能会对网站与系统的概念难以区分，这里给出我的理解：大框架上两者同质，但网站更偏重于UI，而系统则偏重于后台的逻辑处理。很多人概念模糊可能是对网站与网页理解不清晰，绝大多数公司在招聘时，会将程序猿区分为前端开发与后台开发，前者侧重UI侧（B/S架构中就是静态页面设计），后者侧重逻辑侧（与DB对接），如果一个系统能很好的做到前、后台分离，则可称作CMS（Content Management System）</p></blockquote><h1 id="网站开发"><a href="#网站开发" class="headerlink" title="网站开发"></a>网站开发</h1><p>对整个网站的开发过程如下：</p><p><img src="/2018/01/06/First-Website-Design/开发流程图.jpg" alt="流程图"></p><h2 id="前端页面设计"><a href="#前端页面设计" class="headerlink" title="前端页面设计"></a>前端页面设计</h2><p>本科时玩过计算机设计大赛（网站设计），所以对前端并不陌生，但不得不感慨开源前端框架的发展对这一块便利性的贡献，特别是那种对编码有高度强迫症的人（咳咳，不是我不是我）。开发中，我不需要再写大量的css来实现布局，为了一个动态效果也不用再去对js、jQuery研究太深入，因为开源者已经帮我们完成封装。<br><a href="http://www.bootcss.com/" target="_blank" rel="external">Bootstrap</a>是一套扁平化前端框架，栅格化的理念让其自动拥有友好的响应式功能，新手可以通过<a href="http://www.runoob.com/bootstrap/bootstrap-tutorial.html" target="_blank" rel="external">Boostrap3介绍</a>快速入门，有具体需求时候再参考官网的说明文档即可。<br>到这一步，前端开发仍不太友好，bootstrap虽减少了底层工作的实施，但缺乏艺术细菌的人，要搭建静态页面还是十分困难，因此我采用的办法就是down一个别人基于H5、bootstrap写好的开源静态网站（Demo可参考<a href="http://www.youzhan.org/" target="_blank" rel="external">Bootstrap优站精选</a>），在此基础上调整样式、修改细节（这一部分还是需要开发者对前端知识有部分了解）；同时，bootstrap官网也提供了大量被进一步封装的插件可供使用。</p><blockquote><p><strong>补充：</strong>网站中“团队新闻”、“科研成果”板块的表格布局及翻页功能是我自己用js实现的，花了些时间在逻辑设计上（如：处于第一页时，向前翻页的button应失效，但其他时候皆可点击等，这些后期结合Ajax与后台传输数据时逻辑会更复杂），是一个比较痛苦的过程，附上部分代码：</p><p><img src="/2018/01/06/First-Website-Design/table分页功能实现1.jpg" alt="自己实现table分页功能"></p><p>但在做网站后台页面设计时，偶然发现一个开源table框架，仅需在js中为table调用即可实现分页、查找等功能，那时叫一个郁闷！</p><p><img src="/2018/01/06/First-Website-Design/table分页功能实现2.jpg" alt="自己实现table分页功能"></p></blockquote><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>数据库设计分为<strong>概念设计</strong>、<strong>逻辑设计</strong>及<strong>物理设计</strong>，<strong>概念设计</strong>主要指E-R图（实体关系图），记得以前老师总说，读完信管专业出去不会画E-R图，等于白学，我大概就处于白学的边缘。具体的设计规则不难，想学习的同学借一本《管理信息系统》查阅即可，这里直接上图：</p><p><img src="/2018/01/06/First-Website-Design/E-R图.png" alt="实体联系图"></p><p><strong>逻辑设计</strong>上，因为我采用的是关系型数据库，工作即是将E-R图映射成有关联的二维表（关系表），这里不予叙述。</p><p><strong>物理设计</strong>即设计到操作层面了，本科时在接触DBMS（Database  Management System）时，用的是微软的Sql Server，不得不说它对小型网站开发不太友好，光软件就几个G，很多功能基本用不到，所以果断放弃。总听朋友说MySQL不错，轻量级（方便部署）且开源，就果断选择了。<br><a href="https://www.mysql.com/" target="_blank" rel="external">MySQL官网</a>，从这里可以下载，安装步骤也不复杂，具体操作可根据自己的系统，自行百度“MySQL安装教程”参考即可。安装成功后，数据库中关系表的构建这里就不累述了。<br>从这里开始，就需要对SQL语句有一定了解了，用户也可参考<a href="http://www.runoob.com/sql/sql-tutorial.html" target="_blank" rel="external">SQL介绍</a>学习，按需了解基本操作即可。</p><blockquote><p><strong>补充：</strong>MySql只是一种服务，安装成功仅表示你可以使用这项服务（数据的存储、操作——连接、增删查改等），使用时记得要先开启服务。<br>若每一张表都用SQL语句去操作显得十分繁琐了，通常的操作是表格的创建用可视化界面完成，后期增删查改操作涉及用户交互，所以用SQL操纵。在官网下载MySQL时，会自带一个可视化操作软件，个人认为及其难用，这里推荐Navicat，小清新的风格是我的菜。</p><p><img src="/2018/01/06/First-Website-Design/navicat.jpg" alt="Navicat"></p></blockquote><h2 id="后台开发"><a href="#后台开发" class="headerlink" title="后台开发"></a>后台开发</h2><p>后台开发中，我选的语言是PHP，当时做选择时候我权衡了好久，Emmmmmm…</p><blockquote><p><strong>补充：</strong><br><strong>C#：</strong>本科时我用C#较多，C#虽具有高便利性（是真的方便！本机上的服务器环境自动部署好，且很多表单控件被封装的较完善），但也正因此，他的弊端是低灵活性。如：表单控件的样式可能与自设计样式发生冲突、Ajax控件真心难用（自己写的话则不如用其他语言）、出bug时调试过程更繁琐等。当然，最主要的原因还是开发要下Visual Studio，随随便便又是几个G，abandon！<br><strong>JSP：</strong>java我比较熟悉（因为当时团队研究要求用java实现），但JSP没怎么接触，本科有一个室友的毕业设计是用JSP实现的，一想到当时他寂寞的抽一口烟再写几行代码的场景，我也放弃了。<br><strong>PHP：</strong>PHP+MySQL在当时算是比较好的结合了，虽然自己未曾接触过，但还是本着信念，想去尝试下，故花一天时间看完了菜鸟教程对PHP的<a href="http://www.runoob.com/php/php-tutorial.html" target="_blank" rel="external">介绍</a>，就直接上手实干了。<br><strong>其他：</strong>本是想着用Python，当时正好Python也是较热门的语言之一，但有人说Python对后台开发没PHP友好，毕竟在最初设计出来时主要面向的是数据分析需求，故没选。但实习部门有人用Python写后台体验还不错，所以后期若想尝试，Python也是一个不错的选择。另一个就是Nodejs，这是现在一位专写前端的同事推荐的，有兴趣的可以尝试下。</p></blockquote><p>很多人对后台语言存在恐惧心理（很多人就是本科时的我，哈哈），觉得专业课中的java、c等逻辑知识根本用不上，但其实理解了其原理后，才发现都是相通的。<br>这里给出我的理解：后台开发的处理逻辑与上课时的内容无异（顺序、选择、循环等），熟练的开发者也会设计良好的数据结构加速处理效率，需要补充的知识仅是其与前端界面、DB的数据传输工作。<br><strong>前端与后台的数据传输：</strong>主要形式分为两种，一种是同步传输（Synchronous Transmission），PHP中这种形式较简单，缺点是每次提交任务都要全局刷新界面，开销大且不友好，做法是将写好的html文件后缀改为php，即可在代码中添加php脚本“&lt;?php code ?&gt;”，此时php可根据form-name或者id来接收信息并做处理。另一种是异步传输（Asynchronous Transmission），用到的技术是Ajax，可实现界面局部刷新，关于Ajax的学习可以参考<a href="http://www.runoob.com/ajax/ajax-asp-php.html" target="_blank" rel="external">这里</a>，此时页面数据通过js传输给后台处理文件，再接收处理完成的结果，做到了展示与处理完全分离，这里展示一段实现时涉及的代码。</p><p><img src="/2018/01/06/First-Website-Design/php-html.jpg" alt="Php-html"></p><p><img src="/2018/01/06/First-Website-Design/ajax-jquery.jpg" alt="Ajax-jquery"></p><blockquote><p><strong>补充：</strong>Ajax是一门强大且方便使用的技术，jQuery作为js的封装，也对ajax的调用做了完善，主要使用的函数是.post()与.get()，ajax函数的返回格式一般采用json，学过python的童鞋可以将其理解为字典；对json中的数据用html标签及css进行封装，即可达到很棒的交互，网站中“团队新闻”、“科研成果”板块即采用这项技术，页面的后缀仍是html，供大家参考。这里铺上一张对ajax返回的json数据进行解析，形成网页的代码，图中data为ajax传回的json数据。</p><p><img src="/2018/01/06/First-Website-Design/ajax-json-html.jpg" alt="Ajax-json-html"></p><p><strong>补充：</strong>说到后台开发，不得不提的一个问题就是开发环境配置。这里先花一点时间理解下我们平时上网的内流程，当我们使用设备（电脑 or 手机等，简称A）浏览一个网站时，涉及到的请求都要发送给服务器（可理解为远端的电脑，简称B），服务器根据请求进行操作，再将数据返回，A的浏览器则解析返回的数据（这里的数据指被解析后的html标签、css等），从而进行展示。<br>当我处于开发阶段时，还未租用服务器，所以要做的工作就是让我的笔记本既成为A，又成为B。通常情况下，作为A的环境很容易，浏览器都有封装好，所以我们在写静态界面时候，可直接用浏览器运行并展示；后者则需要下载软件部署，正常的操作是百度搜索“Apache+MySQL+PHP开发环境部署”，但因过程十分繁琐，一直认为“学习死于配置”的我果断找到了更方便的方式，那就是<a href="http://www.wampserver.com/" target="_blank" rel="external">WAMPSERVER</a>，一键部署好本机环境。就这样，我在本机上能很方便的进行调试。</p></blockquote><p><strong>后台与数据库的数据传输：</strong>搭建网站时，使用的DBMS是MySQL，所以这一块我使用的是“mysqli”，具体的学习可点击<a href="http://www.runoob.com/php/php-mysql-intro.html" target="_blank" rel="external">这里</a>，它PHP中已封装好的对象，直接调用即可，传入的对象是SQL语句，mysqli将SQL传入DB执行，并返回执行结果。继续附图：</p><p><img src="/2018/01/06/First-Website-Design/mysqli1.jpg" alt="Mysqli1"></p><p><img src="/2018/01/06/First-Website-Design/mysqli2.jpg" alt="Mysqli1"></p><h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><p>网站开发工作结束后，面临的工作就是部署在服务器端，简单的理解就是把写完的所有代码copy到一台可供左右人访问的电脑上，正所谓好东西要学会共享。但困难的理解就包括：<strong>服务器租赁</strong>、<strong>服务器环境部署</strong>、<strong>域名申请</strong>、<strong>域名解析</strong>…停，我们一一来理解。</p><p><img src="/2018/01/06/First-Website-Design/hold-on-example.jpg" alt="举个栗子"></p><p>举个简单的栗子，当我们访问百度时，通常操作是在浏览器中输入域名“www.baidu.com”，实质中，万维网会根据这个域名解析成一个IP地址“XXX.XXX.XXX.XXX”，这个IP地址又和远端的一台计算机唯一匹配，所以我们的访问请求最终是传送到远端计算机中，该计算机根据请求返回请求结果，浏览器解析后展示给成网页。</p><p>我要做的事情与这个过程一样，第一步就是<strong>租赁服务器</strong>（买不起我还租不起吗？），网站部署中对服务器性能主要看重的是硬盘容量与带宽（流量），CPU、GPU、内存等主要是针对高计算量服务，不用太高配置；考虑到网站的访问需求不会太高，故选择了阿里云的最低配服务器（系统是Windows Server 2008），当时一年的价格大概是1100左右，随着云计算的发展，现在可能有一定涨幅。当时主要是对Linux不熟悉，所以系统选择了Windows，但这里建议还是选Linux更好，因为才Windows上装软件、配环境会繁琐的多。</p><p>前面提到，服务器与一个IP地址绑定，此时我们可以通过IP地址来访问这一台电脑（建议使用Windows下自带软件“远程桌面连接”来连接远程Windows服务，较友好），接下来要做的事情就是让访问请求送到我们所写的代码中进行处理，从而可以返回超文本标记语言（网页代码）——<strong>服务器环境部署</strong>。</p><p><img src="/2018/01/06/First-Website-Design/connection.jpg" alt="远程桌面连接"></p><p>这一块的配置确实很麻烦，所以一开始我想到一个捷径，服务器和我自己的电脑都是Windows系统，那直接在上面也装一个WAMPSERVER不就都搞定了吗？但结果不如人意，安装成功后，一旦开启WAMPSERVER，整个服务器就会卡死（至今仍存有疑惑，配置太低？ or WAMPSERVER本身不支持服务器系统），故放弃。之后只有尝试一步步安装Apache、MySQL及PHP，后两者较成功，但Apache的安装总显示失败，于是我的配置组合变成了IIS+PHP+MySQL，虽然组合较奇怪，但仍算是完成了配置工作（后来查询的资料是Apache+PHP+MySQL环境在Linux下会友好的多）。之后的工作就是将代码拷贝到服务器上，并配置端口到8080即可（通过IP地址访问时，默认的端口号）。</p><blockquote><p><strong>补充：</strong>配置环境中的很多细节被我省略了，需要提醒的是在Windows下环境变量的设置，软件（Apache、PHP、MySQL等）中一般自身包含一个配置文件.inf，里面的内容也需要修改的也很多，具体的细节还是碰到了直接度娘，这里仅作提醒。</p><p><strong>补充：</strong>如果购买的服务器系统是Windows时，IIS是需要提前配置的，方便期间，可以在阿里云中搜索Windows Server一键配置包，下载后next到底即可，省去了自己为计算机开启服务的繁琐操作，阿里云的服务化在国内的云供应商中做的还不错。</p><p><img src="/2018/01/06/First-Website-Design/aliyun-config.jpg" alt="阿里云"></p></blockquote><p>完成了前两步，就剩下最后的<strong>域名申请</strong>与<strong>域名解析</strong>了，这一块可直接从阿里云控制台中跳转，域名的申请存在较长的审核周期，建议可提前落实该步骤，因操作官网都有详细说明，这里就不重复提了。</p><blockquote><p><strong>补充：</strong>提一个有意思的现象，这个设想产生的原因是有另一个老师看我做的网站还不错，也提了需求。我的第一反应就是，能否公用一个服务器，申请不同的域名，每个域名对应该服务器的不同端口即可。本着这种设想，我的尝试最终还是失败了，原因是域名在解析时不能解析到带端口的IP地址（这样解释也合乎情理，毕竟可行的话，那云提供商的利润不得大大缩水），之后也一直没想这个事。直到有一次和同事聊到这个需求，他给了一个很赞的建议，即访问时，使用的域名应该也会作为信息传送到服务器，那么可让index页面（被访问时的第一个页面）中写一个判断语句即可，若为XX域名，则跳转至XX界面，可达到同一服务器部署多网站的目的，有才！</p></blockquote><h2 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h2><p>测试是系统开发中较为重要的一步，由于我对文档的整理要求较高，因此测试工作返回的内容结构化较好，且能快速定位，我也方便修改，具体的细节这里就不叙述了，只是强调下文档工作的重要性。</p><h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>安全方面，我在网站开发中主要做了两方面工作：一是防SQL恶意注入，用到函数htmlspecialchars()，使用者在表单中输入的SQL会被解析中html的特殊字符，具体的细节可以参考网上的资料。另一个工作则是对session的控制，后台界面中，我令session具有一定的存活周期，长时间不操作后再登陆时会提示需重新输入用户名及密码；同时，还阻止异常登陆情况的发生（即跳过用户名、密码输入界面访问），上图！</p><p><img src="/2018/01/06/First-Website-Design/session.jpg" alt="Session"></p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>视频的展示，我直接使用H5的video标签，使用起来十分方便，需要注意的是记得在服务器IIS中配置好MIME，具体的介绍可参考<a href="http://blog.163.com/junhe999@126/blog/static/19318021201261743647379/" target="_blank" rel="external">常用MIME类型</a></p><h3 id="统计访问量"><a href="#统计访问量" class="headerlink" title="统计访问量"></a>统计访问量</h3><p>网站中做了一个访问量统计功能，将主页拉到最下面可看到。不过这里只算半个实现，浏览时刷新界面也会使得访问量加1（就不提网站刚上线时，我默默在主页上按F5不动的经历了），实际中实现时还是应该用脚本判断两次浏览是否来自同一IP地址，并给出逻辑：一定时间内同一IP地址的多次访问只记一次访问量，实现起来应该不难，留给大家去实现，这里贴上半个实现的代码：</p><p><img src="/2018/01/06/First-Website-Design/count.jpg" alt="Count"></p><h3 id="Logo"><a href="#Logo" class="headerlink" title="Logo"></a>Logo</h3><p>Logo间接反映了一个团队的逼格，起初这一块计划请一位艺术与设计学院的童鞋帮忙，后来对方比较忙，我就只有自己操刀了（这里使用的是在线Logo设计软件，网上资源较多，提供的素材也够用，列举<a href="https://www.logoaa.com/" target="_blank" rel="external">一个</a>；若追求更高逼格的，就需要上PS了），最后的成果我自己还是比较满意的，上图！</p><p><img src="/2018/01/06/First-Website-Design/teamLogoBlackC.png" alt="Logo"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个项目进展之初觉得不会太困难，但开发过程中对各种新知识的懵圈却很磨人，身边几乎找不到交流的同学，任何知识都靠自学。但不得不说，这个过程锻炼了我的毅力，让我面对陌生的实物不再那么恐惧，还是那句话：“逢山开路，遇水搭桥~”<br>等到网站做完，看着自己整理的总结文件夹，成就感小爆炸，那么又到了直接上图的时候了！</p><p><img src="/2018/01/06/First-Website-Design/doc-demand.jpg" alt="Doc-demand"></p><p><img src="/2018/01/06/First-Website-Design/doc-code.jpg" alt="Doc-code"></p><blockquote><p><strong>补充：</strong>网站构建的代码放到了我的github中，在开发php时使用的编译器是PhpStorm（编译器类型众多，按喜欢的风格选就好）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我第一次一个人单独设计并开发一个网站，需求来源大致是研究生团队的老师们希望能拥有一个团队展示平台，用以对外宣传。而调研中发现外包的费用较高，就在群里询问是否有学生感兴趣，刚好那段时间所写论文的实验结果一直难以有提升，并想到本科时用C#独立开发过一个信息系统，就揽下了这活儿，赚点外快，却没想到前前后后还是很多坑，但最后还是坚持的落实了需求。虽然我自己后来的发展方向也不与信息系统相关，但这份经历算是我17年的成果之一，故借此机会，对其好好做个总结。对于一个之前从未接触PHP、MySQL的我来说，心中的信念就是“逢山开路，遇水搭桥！”亦或是“知知为知知，不知百度知，百度不知谷歌知！”这份总结我也会分享很多技术干活，相信阅读完后对搭建系统就不再那么神秘了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Website Design" scheme="http://yoursite.com/tags/Website-Design/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Bootstrap" scheme="http://yoursite.com/tags/Bootstrap/"/>
    
      <category term="Servers Configuration" scheme="http://yoursite.com/tags/Servers-Configuration/"/>
    
      <category term="CMS" scheme="http://yoursite.com/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>神经网络学习历程推荐</title>
    <link href="http://yoursite.com/2017/11/05/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/11/05/神经网络学习记录与总结/</id>
    <published>2017-11-05T02:52:03.000Z</published>
    <updated>2017-11-28T01:22:21.154Z</updated>
    
    <content type="html"><![CDATA[<p>实习部门的研讨会一直在推动Deep Learning的学习，但最近的几次交流学习方向有点被带偏了，故对于这一块的学习我只能按照自己的计划来走了。看资料的过程中，发现内容良莠不齐，故希望借此文章记录自我的学习过程，一方面将精辟的学习资料进行保存，另一方面督促自己对于这一块的进一步学习。</p><a id="more"></a><h1 id="1-BLOG"><a href="#1-BLOG" class="headerlink" title="1.BLOG"></a>1.BLOG</h1><h2 id="1-1零基础入门深度学习"><a href="#1-1零基础入门深度学习" class="headerlink" title="1.1零基础入门深度学习"></a>1.1零基础入门深度学习</h2><p>此系列是好朋友推荐的，简短的介绍了机器学习的一些基础，之后马上开展重点关注的CNN、RNN等，文章从实例到理论再到Coding，以开发人员的角度介绍知识（这里承认本人数学功底一般，直接上公式立马晕）。</p><h3 id="已看完"><a href="#已看完" class="headerlink" title="已看完"></a>已看完</h3><p><a href="https://www.zybuluo.com/hanbingtao/note/433855" target="_blank" rel="external">零基础入门深度学习(1) - 感知器</a><br><a href="https://www.zybuluo.com/hanbingtao/note/448086" target="_blank" rel="external">零基础入门深度学习(2) - 线性单元和梯度下降</a><br><a href="https://www.zybuluo.com/hanbingtao/note/476663" target="_blank" rel="external">零基础入门深度学习(3) - 神经网络和反向传播算法</a><br><a href="https://www.zybuluo.com/hanbingtao/note/485480" target="_blank" rel="external">零基础入门深度学习(4) - 卷积神经网络</a><br><a href="https://zybuluo.com/hanbingtao/note/541458" target="_blank" rel="external">零基础入门深度学习(5) - 循环神经网络</a></p><blockquote><p>证明过程看着有点懵，这种从特殊推到一般的形式简直是我的救星（虽然最后还是passing this section）<br>“深度循环网络”计算方式个人认为有点问题，从给定的图片可以看出，layer_index&gt;1的循环层每个神经元应该受三个节点的影响，但是公式的意思仅表示其受两个节点影响，可能是书写错误<br><img src="/2017/11/05/神经网络学习记录与总结/revise_1.jpg" alt="section-5_revise_1"></p></blockquote><p><a href="https://zybuluo.com/hanbingtao/note/581764" target="_blank" rel="external">零基础入门深度学习(6) - 长短时记忆网络(LSTM)</a></p><blockquote><p>LSTM被发明出来的原因是因传统的RNN容易发生梯度消失 or 梯度爆炸，因为对参数的训练是沿着梯度的反方向，梯度消失即梯度趋于0，每次训练时，参数基本不发生改变，造成当前时刻输出基本不受长时间间隔的输出影响（几乎无依赖关系），这是不希望看到的；梯度爆炸的解释刚好相反，参数训练时，与当前间隔越长的N，其参数改变值会指数增长，也会阻碍训练过程</p></blockquote><h3 id="未看完"><a href="#未看完" class="headerlink" title="未看完"></a>未看完</h3><p><a href="https://zybuluo.com/hanbingtao/note/626300" target="_blank" rel="external">零基础入门深度学习(7) - 递归神经网络</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习部门的研讨会一直在推动Deep Learning的学习，但最近的几次交流学习方向有点被带偏了，故对于这一块的学习我只能按照自己的计划来走了。看资料的过程中，发现内容良莠不齐，故希望借此文章记录自我的学习过程，一方面将精辟的学习资料进行保存，另一方面督促自己对于这一块的进一步学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Neural Network" scheme="http://yoursite.com/tags/Neural-Network/"/>
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>Introduction_MCTS（未写完）</title>
    <link href="http://yoursite.com/2017/11/01/Introduction-MCTS/"/>
    <id>http://yoursite.com/2017/11/01/Introduction-MCTS/</id>
    <published>2017-11-01T14:43:04.000Z</published>
    <updated>2017-11-13T01:46:15.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>最近在做一个Monte Carlo Tree Search的调研，这几年强化学习的热潮使得该算法大放光彩，我们在Alpha Go与Alpha Zero中也见识了它的强大。这篇总结本着存在必有其原因的思想，刨了下树搜索的发展历史，从发展中探讨MCTS的优点，也算是对自己这段时间调研的一个记录。</p><a id="more"></a><h1 id="Tree-Search"><a href="#Tree-Search" class="headerlink" title="Tree Search"></a>Tree Search</h1><p>树搜索模型在MIP、GO、Constructive Algorithm、Search Engine等领域有广泛的应用，这里我把TS总结为如下过程：<br><img src="/2017/11/01/Introduction-MCTS/tree_search_image.jpg" alt="tree-search-introduction-image"></p><blockquote><p><strong>Tree Search</strong><br>存在一个Search Queue（SQ）储存待探索的节点，根据一定策略，每次选取一个节点进行探索，探索过程中会产生一些新的节点，更新SQ（将产生的新节点插入到SQ中），如此反复，直到满足终止条件<br>反复操作的结果是搜索树被不断完善，好的Select Strategy能加速搜索到optima的速度，结合剪枝策略（缩小搜索空间），进一步提高搜索效率<br>剪枝（prune）：当前节点的评估值差于整棵树已搜索到的最优值时，则放弃当前节点的后续探索步骤，将当前节点及其后续分支从树中剪掉，称为剪枝（PS：小明到酱油店间新修了一条路，他决定尝试是否能更快的到达目的地，历史上他走旧路需花30mins，如今他新路还未走完，所花时间已超过30mins，则可断定新路一定劣于旧路，即可放弃后续探索过程）</p><p><img src="/2017/11/01/Introduction-MCTS/ts_prune_example.jpg" alt="tree-search-prune"></p></blockquote><h2 id="Uninformed-Search"><a href="#Uninformed-Search" class="headerlink" title="Uninformed Search"></a>Uninformed Search</h2><p>Uniformed Search不从环境中获取信息，属于较笨的搜索方式，树搜索中常见的类别有BFS(广度优先搜索)、DFS（深度优先搜索），这里用两张图简要回忆一下这两种搜索方式（序号表示搜索顺序）：<br><img src="/2017/11/01/Introduction-MCTS/bfs_dfs.jpg" alt="Bfs-and-Dfs"></p><h2 id="Informed-Search"><a href="#Informed-Search" class="headerlink" title="Informed Search"></a>Informed Search</h2><p>利用环境信息，辅助树搜索过程，提高搜索效率。这里我以A star算法举例说明：A star算法也是一种树搜索模型，常用于图论中最短路径问题；介绍时，我依以该经典问题作为背景方便理解，实际拓展中，自定义评估函数g(n)、h(n)（下文会介绍）即可用于其他场景。</p><blockquote><p><strong>A star</strong><br>每个节点i保存两个信息：①g(i)记录start node到i的实际最短距离（已发生） ②h(i)记录i到end node的评估距离（未发生）<br>在Search Queue（SQ）中选取探索节点的策略为min{f(n)}，其中f(n)=g(n)+h(n)；由定义可知，f(n)用于衡量当前节点的总体评估距离，即利用了已发生的信息，同时利用了未知的预测信息<br>优点：算法灵活性高①当h(n)小于actual distance(n,end node)时，搜索的点较多，搜索范围较大，找到global optima的概率增大，但搜索效率较低（A star的prune也是以f(n)作为评估，h(n)较小时，节点被剪枝的可能性降低）；反之当h(n)大于actual distance(n,end node)时，搜索效率虽然提高，但更多时候搜索到的仅仅是local optima ②经典的A star算法中h(n)是静态的，实际中可将之设计为动态，随着搜索过程的进行，环境信息的增加，更新h(n)，提高后续搜索效率<br>缺点：①算法对h(n)的设计具有较强依赖性，h(n)与实际值越接近，算法搜索到global optimal的总体效率越大 ②不能保证一定搜索到global optimal</p></blockquote><h1 id="Monte-Carlo-Tree-Search"><a href="#Monte-Carlo-Tree-Search" class="headerlink" title="Monte Carlo Tree Search"></a>Monte Carlo Tree Search</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;最近在做一个Monte Carlo Tree Search的调研，这几年强化学习的热潮使得该算法大放光彩，我们在Alpha Go与Alpha Zero中也见识了它的强大。这篇总结本着存在必有其原因的思想，刨了下树搜索的发展历史，从发展中探讨MCTS的优点，也算是对自己这段时间调研的一个记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tree Search" scheme="http://yoursite.com/tags/Tree-Search/"/>
    
      <category term="A*" scheme="http://yoursite.com/tags/A/"/>
    
      <category term="MCTS" scheme="http://yoursite.com/tags/MCTS/"/>
    
  </entry>
  
  <entry>
    <title>Introduction To Operation Research</title>
    <link href="http://yoursite.com/2017/10/28/Introduction-To-Operation-Research/"/>
    <id>http://yoursite.com/2017/10/28/Introduction-To-Operation-Research/</id>
    <published>2017-10-28T02:30:17.000Z</published>
    <updated>2017-12-01T08:02:20.704Z</updated>
    
    <content type="html"><![CDATA[<p>实习部门做的问题主要是供应链方向的优化，包括库存控制、排产调度、装箱装柜、物流优化等等，对于建立好的数学模型，现阶段使用的Solver是GUROBI，小组成员对于其中求解的原理较感兴趣（不至于完全将其当成黑箱使用），介于我是小组中唯一的OR方向（大部分是CS、统计方向），leader希望我对这一块做个详细的调研，并与某天做一次presentation。<br>为了形成体系化的讲解，对单纯形部分的理论知识进行了补充，结合16年暑假跟随华南理工的一位教授学习的MIP solver知识，用一些图将自己的理解形象的表示出来。最后展示效果不错，因此也在这里进行记录与分享。<br>展示内容包含一些我自身对知识的理解，如有错误，请随时提出。<br>内容知识涉及的参考文献、资料，都可以在我的github中documents项目中查询到。</p><a id="more"></a><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><blockquote><h2 id="1-目录"><a href="#1-目录" class="headerlink" title="1.目录"></a>1.目录</h2><blockquote><p>介绍的内容包括六方面：1.线性规划；2.单纯形法；3.Column Generation；4.Bender Decomposition；5.MIP Solver Core；6.GUROBI</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/content.jpg" alt="content"></p></blockquote><h2 id="2-线性规划"><a href="#2-线性规划" class="headerlink" title="2.线性规划"></a>2.线性规划</h2><blockquote><p>线性规划是凸优化的一种，先来看看凸集与凸优化的定义。</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt1-3.jpg" alt="part1-3"></p><blockquote><p><strong>凸集</strong>：集合中任意两点连线上的点仍属于该集合，否则为非凸；线性规划的解空间因为是由一个个超平面切分空间得来，故解空间是一个规则的多面体（边缘线性的凸集）。<br><strong>凸优化</strong>：解空间为凸集，且目标函数为线性的优化。<br>凸优化有两条很重要的性质，为单纯形的实现做了铺垫：a.从任意点出发，我们可以在有限步内移动到局部最优点；b.局部最优点即是全局最优点。</p></blockquote><p>再补充一些运筹学中的基本定义：a.所有的问题都可以转化为标准式；b.系数矩阵A(m*n)满秩，则任意线性无关的m列向量成为基B，对应的变量为基变量Xb，余下的列(n\m)构成非基N，对应的变量为非基变量Xn；c.满足所有约束条件的解为可行解，至少违背一条约束的解为非可行解。更多详细的定义可借一本运筹学中文教材参考。</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt1-1.jpg" alt="part1-1"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt1-2.jpg" alt="part1-2"></p></blockquote><h2 id="3-Simplex-Method"><a href="#3-Simplex-Method" class="headerlink" title="3.Simplex Method"></a>3.Simplex Method</h2><blockquote><p>凸优化的性质给单纯性法提供了理论基础，这里给一个通俗的解释：线性规划问题的解空间是规则多面体，单纯形法沿着多面体的边移动，每次移动都向着使得目标更优的方向，则有限步内一定可到达局部最优点（全局最优点）。下面的几张slides是关于单纯形法的具体实现与理论证明：</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-1.jpg" alt="part2-1"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-2.jpg" alt="part2-2"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-3.jpg" alt="part2-3"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-4.jpg" alt="part2-4"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-5.jpg" alt="part2-5"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-6.jpg" alt="part2-6"></p><p>这一部分内容主要参考教材《Introduction to linear programming》2-3章，这里阐述一些通俗的解释：<br>（1）单纯形法沿着多面体的边移动进行优化，每一条边都表示针对当前点的可移动方向。<br>（2）在移动时要保证使得目标更优，但移动过程中，不能违背任一约束条件（保证解依旧在可行域之中），解在沿着多面体的边移动时，当前基变量中的一部分会随着移动而不断减小，当存在一个基变量减小为0时，必须停止移动（继续移动会违背变量大于等于0的约束），此时到达多面体的一个新节点，新加入的变量值大于0，原先的一个变量（不考虑退化情况）值减小为0，这就是单纯形法的换基过程（可参考slide-3中的实例）。<br>（3）通过slide中的推导会发现，我们在线性规划中总是提到的reduced cost就是目标值增量，因此在最小化问题中，希望沿着增量小于0的方向移动；一旦发现某一顶点可移动边的所有增量（reduced cost）都不小于0，则求得最有解，这就是对单纯形法中optimality condition的解释。<br>（4）slide-5对单纯形算法的流程做了描述（based on minimal problem），step1是为算法确定初始解，这一步其实很影响算法效率（在保证搜索开始的点，初始解为基可行解的同时，若其已离optimal很近，效率不高才怪）；step2计算reduced cost，选择reduced cost小于0的方向移动，存在多个rd小于0的方向时，选择策略灵活（reduced cost最小表示沿着该方向移动单位步长，会使得目标降低的更快，故有些教材会建议选取rd最小的方向移动的策略，但reduced cost越小，不代表可移动步长也大，所以才说策略灵活）；step4则是计算沿着优化方向的最大可移动步长，判别依据是移动中所有变量不能小于0。</p></blockquote><h2 id="4-大规模LP求解"><a href="#4-大规模LP求解" class="headerlink" title="4.大规模LP求解"></a>4.大规模LP求解</h2><blockquote><p>在问题规模上升到移动一定程度后，很多算法的求解效率大幅度降低，此时就会有一大批学者涌入，研究算法如何适配大规模问题，这之中一个很重要的思想就是分解。我们再次考虑LP的模型，明显可知问题规模的增大主要来之两方面：a.变量数目增加；b.约束个数增加，列生成（Column Generation）与切平面（Cutting Plane or Bender Decomposition）就是为解决他们而发明出的。<br>这两个算法单独说理论都要讲好久，故讲解时不谈公式（了解理论前，对单纯形法的推导了解必不可少！），依旧是希望通过通俗的语言来了解它们。抛砖引玉，先给出一张自我总结图：</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt4-3.jpg" alt="part4-3"></p><h3 id="Column-Generation"><a href="#Column-Generation" class="headerlink" title="Column Generation"></a>Column Generation</h3><p>变量较多时单纯形算法的求解效率明显降低，但存在一些问题就是这么BT，如slide中的cut stock problem，当数学模型建成set cover model时，变量的个数为指数级别。考虑到这类问题约束较少，即约束中行个数m远小于列数n，故求解中，可真对原问题（Master Problem）只取很少一部分变量n1（m &lt; n1 &lt;&lt; n）做单纯形求解（Solve Restricted MP），但在检验optimality condition时，回到原问题，考虑所有n个变量。<br>以最小化问题为例，判断解是否最优的条件为检测所有n个变量的reduced cost是否都不小于0，故此时可构建搜索最小化reduced cost的优化问题（sub-problem），根据rd的计算公式形式可知，sub-problem是一个1D-Knapsack Problem，求解效率较高。当sub-problem的最优值 &gt;= 0，则说明n个变量中reduced cost的最小值都比0大，此时原问题依据单纯形法的最优判断条件，达到最优；若sub-problem的最优值 &lt; 0，说明存在需要继续进基的非基变量，问题求解过程继续。</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt3-1.jpg" alt="part3-1"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt3-2.jpg" alt="part3-2"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt3-3.jpg" alt="part3-3"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt3-4.jpg" alt="part3-4"></p><p><strong>CG拓展：</strong><br>（1）求解RMP时，可将其转换为对偶问题（虽然RMP相对于MP来说变量数少了很多，但依旧很多，而有证明指出单纯形法求解多约束少变量问题的效率大于多变量少约束问题），对偶问题的解称为单纯形乘子，作为求解sub-prolem目标中的价值系数。<br>（2）MP的变量被分为考虑集N1，非考虑集N2（N2=N\N1），对于检测出来的N2中reduced cost小于0的变量，需进基，但也可设计一定策略，检测N1中不会再进基的非基变量，将其挪到非考虑集N2中，以此预防N1不断增大，求解RMP效率降低的情况发生。<br>（3）每次求解子问题时，可让solver给出几个可行解，对应于一次挪动（从N2到N1）的变量个数大于1，加速收敛过程。<br>（4）……</p><h3 id="Bender-Decomposition"><a href="#Bender-Decomposition" class="headerlink" title="Bender Decomposition"></a>Bender Decomposition</h3><p>约束较多的问题，常见的组合优化问题TSP就是一个。考虑slide中TSP的数学模型，需存在破子环的约束，该类约束的数量级为指数级，证明如下：</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt4-10.jpg" alt="part4-11"></p><p>故此时可考虑一开始仅纳入一部分约束进行求解（Solve Restricted MP），在检查解的合法性时则带入所有的约束中检查，将候补集中违背的约束加入RMP，如此反复，直到RMP的最优解满足所有约束，则此时sol* of MP = sol* of RMP。</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt4-1.jpg" alt="part4-1"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt4-2.jpg" alt="part4-2"></p><p><strong>BD拓展：</strong><br>（1）被纳入候选集中的约束应满足约束力较弱，对解的结构会造成影响，但对目标值的影响不明显（若明显影响目标，将其不考虑到RMP内时，RMP的解大概率会违背该约束）；TSP中的破子环约束就类似，存在子环的解与不存在的解中边的个数一样，其明显影响解的结构，对目标值影响不明显。<br>（2）上述TSP模型中，候选集的约束来源于定义，实际求解过程中候选集可被不断更新，根据一定数学转换来形成加入RMP的约束，加速收敛速度，这一块在求解MIP的策略中使用较多，称为cutting plane。<br>（3）BD的思路与CG相似，因本身也是原问题与对偶问题的转换所带来的求解方式的改变，具体的细节可补充下运筹学对偶问题，做更深入的探究。<br>（4）……</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>算法的核心思想————分解（通过将求解一次大规模问题分解为求解若干个小问题的整合）</p></blockquote><h2 id="5-MIP-Solver-Core"><a href="#5-MIP-Solver-Core" class="headerlink" title="5.MIP Solver Core"></a>5.MIP Solver Core</h2><blockquote><p>上述提到的单纯形法适合解LP问题，但实际中很多问题的变量类型是整形的（IP，Integer Programming）或是混合类型（整形实形都存在，Mixed Integer Programming），求解该类问题的框架是怎样的呢？现存最优化求解器（GUROBI、CPLEX、LpSolve等）都支持直接将MIP模型输入，帮助求解，其内部核心的求解框架本章节会简要介绍一下。</p><h3 id="求解步骤"><a href="#求解步骤" class="headerlink" title="求解步骤"></a>求解步骤</h3><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt5-1.jpg" alt="part5-1"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt5-2.jpg" alt="part5-2"></p><p>上述两张图是我自己的总结，其核心方法是分支定界法（BB，Branch and Bound），当问题规模较大时，就会在BB中嵌入CG或者Cutting Plane等算法，嵌入CG后成为分支定价法（BP，Branch and Price，再嵌入Cutting Plane后称为Branch and Price and Cut）。<br>大致求解步骤：<br>（1）对于一个IP问题，第一步做松弛（Relaxation，将决策变量必须为整形的约束放松为实数形）得到LP问题。<br>（2）用单纯形法求解LP问题得到solLp*（global optimal solution of LP），当问题规模较大时，单纯形外层套上Column Generation框架。<br>（3）判断solLp*中所有决策变量的值是否是整形，若为是，则该IP问题的解已被找到，有solIp* = solLp*（因为LP是IP的松弛问题，其最优解一定不会比原问题差）；若为否，则可考虑是否存在有效的cut（一条cut可看作为问题加上一条约束，切割解空间中的实数解空间，帮助LP的解尽可能与IP等价），每次加cut，都要重复求解LP并做判断工作。当解仍达不到全为整数且不存在有效的cut时，进入步骤4。<br>（4）此时回到分支定界的范围，为问题添加分支，将其划分成两个子节点（这里分支可以看作两条对立的约束，将解空间还分成两部分，如LP问题中某个决策变量x = 10.5，则分支约束可为x &lt;= 10及x &gt;= 11，原问题模型分别加上两个约束，形成两个子问题，即子节点）。<br>（5）子节点重复步骤1-3，但需不断更新自身的Bound，包括UB（Upper Bound）及LB（Lower Bound），这两者为问题的最优解限制了一个范围，即LB &lt;= sol* &lt;= UB；节点的UB一般是整个问题目前为止搜索到的最好的可行解（全部变量为整形），也可以是用启发式算法求得的可行解，无论什么方式，取最小；LB一般是松弛问题LP的解，也可以是其他方式，取最大值。对于某一节点，若UB &lt; LB时，则无继续搜索的必要，进行剪枝操作，若LB = UB则当前节点已经搜索完毕，得到可行解，用其更新整棵树（Branch and Bound可以看成树搜素过程）的UB，若LB &lt; UB，则进行步骤1-4的工作。<br>（6）当整棵树搜索完全时，即可得到global optimal of IP。</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt5-3.jpg" alt="part5-3"></p><h3 id="求解效率关键点分析"><a href="#求解效率关键点分析" class="headerlink" title="求解效率关键点分析"></a>求解效率关键点分析</h3><p>（1）分支策略的选择对求解效率影响较大，每次分支期望能平均划分解空间，这种思想类似于二分排序。<br>（2）好的cut（求出实数空间的同时，尽量保证约束所在的超平面覆盖整数解，因为单纯形法是沿着边进行搜索的）能保证LP的解尽可能接近IP，减少分支过程，加速求解。<br>（3）分支定界法的原型仍然是树搜索，那么节点的搜索顺序很重要，好的顺序能优先搜到较好的区域，得到较好的UB，加速剪枝过程，提高效率。<br>（4）每一个节点的bound确定方式较多，可根据问题特点特殊设计，加速收敛。<br>（5）……</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>为求得最优解，算法还是要考虑遍历所有的解空间，剪枝过程筛掉了其中不好的一部分，故整个框架加速了问题求解效率。现OR领域很多论文是自己实现分支定界框架，仅让优化器辅助LP问题的求解，而其创新点就是刚刚说明的影响求解效率关键点的设计；近几年兴起的Machine Learning结合OR的突破点也主要是融入这几步，这段时间也开始在做调研，后期的总结会再形成一篇博文。</p></blockquote><h2 id="6-GUROBI"><a href="#6-GUROBI" class="headerlink" title="6.GUROBI"></a>6.GUROBI</h2><blockquote><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt6-1.jpg" alt="part6-1"></p><p>GUROBI算是现阶段求解效率最高的最优化求解器，实习部门对其进行了采购，学习起来十分简单，官网上都有参考案例。<br>一旦建立好数学模型，coding过程就是一条条的将变量、目标、约束加入模型中，再运行solve()函数；当然，求解器也有很多进阶功能，如callback、multi-objective等，这些都有消息的参考文件，但一般情况下不会用到。</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习部门做的问题主要是供应链方向的优化，包括库存控制、排产调度、装箱装柜、物流优化等等，对于建立好的数学模型，现阶段使用的Solver是GUROBI，小组成员对于其中求解的原理较感兴趣（不至于完全将其当成黑箱使用），介于我是小组中唯一的OR方向（大部分是CS、统计方向），leader希望我对这一块做个详细的调研，并与某天做一次presentation。&lt;br&gt;为了形成体系化的讲解，对单纯形部分的理论知识进行了补充，结合16年暑假跟随华南理工的一位教授学习的MIP solver知识，用一些图将自己的理解形象的表示出来。最后展示效果不错，因此也在这里进行记录与分享。&lt;br&gt;展示内容包含一些我自身对知识的理解，如有错误，请随时提出。&lt;br&gt;内容知识涉及的参考文献、资料，都可以在我的github中documents项目中查询到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Simplex Method" scheme="http://yoursite.com/tags/Simplex-Method/"/>
    
      <category term="Column Generation" scheme="http://yoursite.com/tags/Column-Generation/"/>
    
      <category term="Bender Decomposition" scheme="http://yoursite.com/tags/Bender-Decomposition/"/>
    
      <category term="MIP Solver Core" scheme="http://yoursite.com/tags/MIP-Solver-Core/"/>
    
  </entry>
  
</feed>
