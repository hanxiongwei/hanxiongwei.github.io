<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Essay_Han Xiongwei</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-14T05:27:42.002Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Han Xiongwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>四川之行</title>
    <link href="http://yoursite.com/2019/05/09/%E5%9B%9B%E5%B7%9D%E4%B9%8B%E8%A1%8C/"/>
    <id>http://yoursite.com/2019/05/09/四川之行/</id>
    <published>2019-05-09T13:04:32.000Z</published>
    <updated>2019-05-14T05:27:42.002Z</updated>
    
    <content type="html"><![CDATA[<p>还有一个月左右就要结束学生时代，成为一名“真正”的社会人了。为什么说“真正”呢，因为上学的时候一直在外实习，那时也不知道自己到底是一名学生，还是一名社会人，回归学校的这一个多月，反而有些不适应。</p><p>总是开玩笑说我有一丢丢社会恐惧症，可能是性格所致，觉得生活的变化总需要有一些象征性的逗号，好对之前的生活做一次总结，对未来做一些展望。我最终的总结之一就是要出去走走，所以买了去成都的火车票，踏上了这次旅途。成都的朋友们超级给力，带我体会了一次不打卡的旅行~</p><p>“心情不好的时候，就来一顿火锅；如果一顿不能解决问题，那就两顿！”</p><a id="more"></a><blockquote><p>一次旅行，一次成长。</p></blockquote><h1 id="行程篇"><a href="#行程篇" class="headerlink" title="行程篇"></a>行程篇</h1><p>武汉(4.31)→成都(5.31)→乐山(5.2)→成都(5.2)→神木垒+达瓦更扎，雅安市(5.3)→成都(5.4)→重庆(5.5)→武汉(5.6)</p><p><img src="/2019/05/09/四川之行/1-1.jpg" alt=""></p><blockquote><p>感慨一句，向西的火车速度为高铁动车丢脸了- -#，过去途中碰上前面行驶的列车在抢修，动车走了十二个小时多…</p><p>节假日期间尽量不出行，节假日期间尽量不出行，节假日期间尽量不出行，重要的话说三遍。感受一下人流量高峰</p><p><img src="/2019/05/09/四川之行/1-2.jpg" alt=""></p></blockquote><h1 id="美食篇"><a href="#美食篇" class="headerlink" title="美食篇"></a>美食篇</h1><p>跟着本地人吃总不会错！先来个总结：</p><ol><li>钵钵鸡、火锅、麻辣烫、油炸串串、烧烤…这些东西真的有区别！（好吧，有些只有本地人能区分），不过经过这一趟的磨炼，我也掌握了一丢丢区分的技能（见最后的总结篇）</li><li>以后吃火锅再也不瞎调一个混合碟儿，要来一个逼格超高的油碟和干碟，当然也要一碟芝麻酱…在广东的话，还需要一碟酱油…</li><li>人吃辣的能力真心差别挺大的，我吃到胃有烧烧的感觉（虽然嘴里并不觉得辣），别人没啥感觉…</li><li>攻略上的美食街不要信，一定要向本地人要美食攻略</li></ol><h2 id="成都美食"><a href="#成都美食" class="headerlink" title="成都美食"></a>成都美食</h2><h3 id="白凉粉-黄凉粉-甜水面"><a href="#白凉粉-黄凉粉-甜水面" class="headerlink" title="白凉粉+黄凉粉+甜水面"></a>白凉粉+黄凉粉+甜水面</h3><p><img src="/2019/05/09/四川之行/2-1-1.jpg" alt=""></p><blockquote><p>地点：洞子口张老二凉粉（文殊院店）</p><p>感慨：这是吃早餐？？？白凉粉（左上）与黄凉粉（右）的味道一般，只记得辣了；甜水面（右）真心好吃，虽然辣，但是辣椒超级香！</p></blockquote><h3 id="卤鸡爪"><a href="#卤鸡爪" class="headerlink" title="卤鸡爪"></a>卤鸡爪</h3><p><img src="/2019/05/09/四川之行/2-1-2.jpg" alt=""></p><blockquote><p>地点：太古里降龙爪爪分店</p><p>感慨：作为一名对鸡爪要求超高的同学，这家的味道还是很不错的，入口即化，但是后来发现此连锁店在重庆和武汉都有…也就和武汉的小民大排档的卤鸡爪有那么一丢丢差距</p></blockquote><h3 id="火锅"><a href="#火锅" class="headerlink" title="火锅"></a>火锅</h3><p><img src="/2019/05/09/四川之行/2-1-3.jpg" alt=""></p><p><img src="/2019/05/09/四川之行/2-1-4.jpg" alt=""></p><blockquote><p>地点：谭鸭血老火锅（王府井直营店）</p><p>感慨：</p><ol><li>奔着大众热度第一去的，排了两个多小时！但有点怀疑热度是靠折扣券刷到第一的</li><li>锅底看着辣，其实不咋辣（也可能这是旅途最后一天吃的，我的辣觉已经觉醒了…成都朋友是觉得不辣的），后面还要了一大盘辣椒放进去，还是不太辣…不太能吃辣的朋友推荐，想做成都最辣的男人还是建议去川西坝子、大龙燚等</li><li>鸭血和鸭肠不错！分量很足，成都朋友给的建议是按人均三盘菜点菜就好</li></ol></blockquote><h3 id="老妈蹄花"><a href="#老妈蹄花" class="headerlink" title="老妈蹄花"></a>老妈蹄花</h3><p><img src="/2019/05/09/四川之行/2-1-5.jpg" alt=""></p><blockquote><p>地点：易老妈蹄花（东城根街总店），人民公园附近</p><p>感慨：</p><ol><li>入口即化的蹄花！光吃可能有点腻，所以一定要蘸辣椒酱~</li><li>一定要配一份冰粉（右）</li><li>一条街的招牌都是老妈蹄花，都写着总店…所以切记跟着大众点评上的地点与招牌样式找到指定的这家</li></ol></blockquote><h3 id="奶茶"><a href="#奶茶" class="headerlink" title="奶茶"></a>奶茶</h3><p><img src="/2019/05/09/四川之行/2-1-6.jpg" alt=""></p><blockquote><p>地点：茶百道（太古里店）</p><p>感慨：大众上，成都的奶茶排名第一是喜茶（太过强大）…但这家排名第二，而且是发源自成都本地的品牌，以熊猫作为logo，不能再萌；很多品类都很诱人，为了打卡，选了个招牌芋圆奶茶，只记得芋圆很好吃~</p></blockquote><h3 id="成都小酒-红烧兔肉"><a href="#成都小酒-红烧兔肉" class="headerlink" title="成都小酒+红烧兔肉"></a>成都小酒+红烧兔肉</h3><p><img src="/2019/05/09/四川之行/2-1-7.jpg" alt=""></p><p><img src="/2019/05/09/四川之行/2-1-8.jpg" alt=""></p><blockquote><p>地点：耍酒馆（贝森店）</p><p>感慨：</p><ol><li>主要是来喝酒啦，图一里就有6种~旁边桌的小姐姐们点完酒拍照打卡后，就把酒都送给我们这一桌了…品着小酒，吃着美食，和好久不见的高中同学畅聊的感觉很不错（切记不要点太多酒，还是能把人喝醉的！）</li><li>美食上，这里可以点红烧兔肉、烧烤、热串串，味道都还不错，适合想快速把这几样美食一起解决的朋友</li></ol></blockquote><h2 id="乐山美食"><a href="#乐山美食" class="headerlink" title="乐山美食"></a>乐山美食</h2><h3 id="翘脚牛肉-粉蒸牛肉-粉蒸肥肠"><a href="#翘脚牛肉-粉蒸牛肉-粉蒸肥肠" class="headerlink" title="翘脚牛肉+粉蒸牛肉+粉蒸肥肠"></a>翘脚牛肉+粉蒸牛肉+粉蒸肥肠</h3><p><img src="/2019/05/09/四川之行/2-2-1.jpg" alt=""></p><blockquote><p>地点：冯三嬢(niang)翘脚牛肉</p><p>感慨：</p><ol><li>实惠！翘脚牛肉（右）口感非常嫩；其实被推荐的是隔壁那家店，但看到已经排了大几十号人的长队，就选了这家，但仿佛选对了~</li><li>粉蒸牛肉（左下）和粉蒸肥肠（左上）都是入口即化，个人感觉，牛肉更好吃</li><li>一定要蘸干碟吃，不然有点腻~忽略周黑鸭的小龙虾（上），成都朋友们都觉得好吃，哈哈</li></ol></blockquote><h3 id="冰粉"><a href="#冰粉" class="headerlink" title="冰粉"></a>冰粉</h3><p><img src="/2019/05/09/四川之行/2-2-2.jpg" alt=""></p><p><img src="/2019/05/09/四川之行/2-2-3.jpg" alt=""></p><blockquote><p>地点：串妹花式冰粉（图一，冯三嬢(niang)翘脚牛肉对面的小店），赵记原创三鲜冰粉（图二）</p><p>感慨：小店的冰粉感觉味道更棒，料多，吃起来冰冰凉凉的；三鲜冰粉的味道则胜在米酒汤圆的味道更棒上~</p></blockquote><h3 id="豆腐脑（辣的！）"><a href="#豆腐脑（辣的！）" class="headerlink" title="豆腐脑（辣的！）"></a>豆腐脑（辣的！）</h3><p><img src="/2019/05/09/四川之行/2-2-4.jpg" alt=""></p><blockquote><p>地点：九九豆腐脑</p><p>感慨：</p><ol><li>豆腐脑的甜咸大战果然仍在持续中…然而我认为的豆腐脑和豆花在成都朋友眼里都属于豆花</li><li>这家属于连锁店，但味道一般般，不过是真的辣，另外，他家的咔饼就不要吃了；乐山本地人吃豆腐脑一般去的是另一家（见后面）</li><li>只用吃里面的料，厚油汁儿不用喝，带着喝甜豆腐脑的思维，吃到最后会怀疑人生…（才发现一个动作是“喝”，另一个的动作是“吃”）</li></ol></blockquote><h3 id="钵钵鸡"><a href="#钵钵鸡" class="headerlink" title="钵钵鸡"></a>钵钵鸡</h3><p><img src="/2019/05/09/四川之行/2-2-5.jpg" alt=""></p><blockquote><p>地点：叶婆婆钵钵鸡</p><p>感慨：言语已经无法形容它的好吃了，香、麻、辣的完美结合，超级麻！红油味中，芝麻带来的口感锦上添花，我们最后都是将藤椒里的菜捞起来放在红油里泡一下再吃的…同行的小伙伴们一直认为，这是乐山之行最好吃的地儿~</p></blockquote><h3 id="甜皮鸭"><a href="#甜皮鸭" class="headerlink" title="甜皮鸭"></a>甜皮鸭</h3><p><img src="/2019/05/09/四川之行/2-2-6.jpg" alt=""></p><blockquote><p>地点：赵鸭子甜皮鸭，王浩二记六嬢甜皮鸭</p><p>感慨：</p><ol><li>前者是本地人觉得好吃的店儿，味道会更甜一些，后者是美食攻略推荐的，两者味道有区别，具体难以言表…</li><li>作为一个在广东待了很久的人，没吃之前认为它和烧鹅的味道应该差不多，但吃到嘴里还是很有惊喜感！甜皮鸭会更有嚼劲，甜味渗透到肉的程度更高，脆脆的皮很香，第一口让我想起了在香港吃的烤乳猪~</li></ol></blockquote><h3 id="泡鸡爪"><a href="#泡鸡爪" class="headerlink" title="泡鸡爪"></a>泡鸡爪</h3><p><img src="/2019/05/09/四川之行/2-2-7.jpg" alt=""></p><blockquote><p>地点：九妹凤爪</p><p>感慨：可能因为泡鸡爪不是我的菜，所以不觉得好吃…一共四种口味，我实在是区分不出来这椒那椒，只记得都很辣…</p></blockquote><h3 id="糖醋排骨"><a href="#糖醋排骨" class="headerlink" title="糖醋排骨"></a>糖醋排骨</h3><p><img src="/2019/05/09/四川之行/2-2-8.jpg" alt=""></p><blockquote><p>地点：赵记原创三鲜冰粉（没看错，冰粉店还卖排骨）</p><p>感慨：甜辣味道，值得尝试~可能是和钵钵鸡一起吃的，所以不太记得具体的口感（因为钵钵鸡真的太好吃了…），买的时候也是排了好长的队，他家的土豆和排骨看着都很好</p></blockquote><h3 id="蛋烘糕"><a href="#蛋烘糕" class="headerlink" title="蛋烘糕"></a>蛋烘糕</h3><p><img src="/2019/05/09/四川之行/2-2-9.jpg" alt=""></p><blockquote><p>地点：赵记原创三鲜冰粉（没看错，还是这家，冰粉店还卖蛋烘糕）</p><p>感慨：</p><ol><li>蛋烘糕竟然是这家需要等待最长的队？？？经过观察，做一个需要1-2分钟，一共就两个制作台，所以要排好久…</li><li>建议就买一两个，趁着有脆感马上吃，不然皮软了味道就很一般了（然而有脆感的时候是不是很好吃呢？因为来都来了，因为排了好久，默认为很好吃吧…）</li></ol></blockquote><h3 id="烧烤"><a href="#烧烤" class="headerlink" title="烧烤"></a>烧烤</h3><p><img src="/2019/05/09/四川之行/2-2-10-12.jpg" alt=""></p><blockquote><p>地点：徐烧烤总店（四川省-乐山市-市中区-滨江路中段60号）</p><p>感慨：</p><ol><li>为什么地址要写的这么详细呢，因为这家真心难吃，踩到雷了！蔬菜吃起来酸酸的，成都朋友吃了口脑花直接怒了，“哪能做出这种味道！”，体验最好的可能是他家的米酒糟了</li><li>乐山的烧烤的外界评价一直很高，这次是无缘体会了，所以只说说没见过的菜名，包浆豆腐（左下）</li><li>难吃到我忘了第三条要说什么了…</li></ol></blockquote><h3 id="油炸串串"><a href="#油炸串串" class="headerlink" title="油炸串串"></a>油炸串串</h3><p><img src="/2019/05/09/四川之行/2-2-13.jpg" alt=""></p><blockquote><p>地点：长药油炸串串（张公桥好吃街）</p><p>感慨：</p><ol><li>上面那一大盘烧烤最后都没吃，冒着大雨大家也要再吃顿好的，不然怎么对得起“来都来了”，就来了张公桥的这家店</li><li>味道不算惊艳，我只能吃的出来和烧烤有区别（一个是烤，一个是油炸），但价格超实惠！因为比较饿，不小心吃到一串折耳根…现在开始，苦瓜和折耳根之间，我选择苦瓜！</li><li>张公桥好吃街是乐山的小吃街，等价于武汉的户部巷，本地人不去，专门吸引外地人的地儿；整条街比较闹，所有店都吆喝着行人，这家店却很佛系，门店很小，开店的老爷爷老奶奶很和蔼，坐在这儿吃东西时有着一种“平静”</li></ol></blockquote><h3 id="麻辣烫"><a href="#麻辣烫" class="headerlink" title="麻辣烫"></a>麻辣烫</h3><p><img src="/2019/05/09/四川之行/2-2-14-16.jpg" alt=""></p><blockquote><p>地点：小起头麻辣烫</p><p>感慨：</p><ol><li>在大家的坚持下，为了照顾我，点了鸳鸯锅…（虽然我最后基本没碰清汤那一边~）</li><li>想去的店下午才开门（后来才知道，麻辣烫对乐山人民来说，一般是晚上吃），滴滴师傅为我们介绍了这家店，但意外的发现味道很不错，锅底很香，食材料足新鲜！</li><li>牛肉上直接串一个藤椒？？？煮在辣锅里？？？这还能吃吗？？？真香…</li><li>海椒面儿好吃！附上干碟和油碟~</li><li>水杯拿上来的时候我是很好奇的，因为第一次见这样的水杯，直到看到朋友像图一那样固定串串，机智…</li></ol></blockquote><p>烧麦</p><p><img src="/2019/05/09/四川之行/2-2-17.jpg" alt=""></p><blockquote><p>地点：海汇源烧麦</p><p>感慨：配上鸡汤一起，早餐高配！蘸着提供的辣酱，一口一个简直过瘾~此时的我已习惯吃一顿油辣的早餐了…</p></blockquote><h3 id="豆奶"><a href="#豆奶" class="headerlink" title="豆奶"></a>豆奶</h3><p><img src="/2019/05/09/四川之行/2-2-18.jpg" alt=""></p><blockquote><p>地点：四川吃饭的地儿一般都会有~</p><p>感慨：</p><ol><li>比维他奶好喝，和银鹭花生牛奶的味道有点类似，但没那么重的花生味儿</li><li>如果一瓶不能消除你嘴里的辣感，那就来两瓶！</li></ol></blockquote><p><img src="/2019/05/09/四川之行/2-2-19.jpg" alt=""></p><blockquote><p>地点：乐山很常见，成都只有很少门店有售</p><p>感慨：</p><ol><li>第一次听大家说要喝峨眉雪，我还以为是一种奶茶，这名字也太文艺了吧！</li><li>味道有点像小时候喝的荔枝爽，但更口感更清凉些，一定要喝冰的~</li></ol></blockquote><h3 id="健胃消食片"><a href="#健胃消食片" class="headerlink" title="健胃消食片"></a>健胃消食片</h3><p><img src="/2019/05/09/四川之行/2-2-20.jpg" alt=""></p><blockquote><p>感慨：必备…</p></blockquote><h3 id="本地人推荐"><a href="#本地人推荐" class="headerlink" title="本地人推荐"></a>本地人推荐</h3><ol><li>烧烤——长城大厦附近</li><li>毛弟翘脚牛肉</li><li>古真记钵钵鸡——海棠路</li><li>豆豆豆腐脑</li><li>黄瓜瓢（西坝豆腐店），方德西坝豆腐</li><li>英子油炸串串——花园街</li></ol><blockquote><p>感慨：无奈快离开时才碰上一个会吃的乐山人，介绍的地儿只能先拿小本本记下来，下次找机会再来吃了；师傅那一口乐山话我是真的听不懂…</p></blockquote><h2 id="雅安美食"><a href="#雅安美食" class="headerlink" title="雅安美食"></a>雅安美食</h2><p><img src="/2019/05/09/四川之行/2-3-1.jpg" alt=""></p><p><img src="/2019/05/09/四川之行/2-3-2.jpg" alt=""></p><blockquote><p>地点：神木垒</p><p>感慨：跟团游就不要想美食了…烤土豆（图一左）就当尝试一下高山土豆了，烤肠（图一右四）味道不错~图二是安排的藏式火锅，我觉得重新定义了藏式火锅…</p></blockquote><h2 id="重庆美食"><a href="#重庆美食" class="headerlink" title="重庆美食"></a>重庆美食</h2><p>因只在重庆待一天，就没去体验重庆九宫格火锅（想了下一个人去吃是不是有点孤独…），在八一好吃街逛了一圈，尝试的几种小吃都还可以~</p><h3 id="红糖凉糕"><a href="#红糖凉糕" class="headerlink" title="红糖凉糕"></a>红糖凉糕</h3><p><img src="/2019/05/09/四川之行/2-4-1.jpg" alt=""></p><blockquote><p>地点：好友来</p><p>感慨：吃起来有股皮蛋味儿，所以只记得是红糖水配皮蛋了…不太好吃</p></blockquote><h3 id="锅巴土豆"><a href="#锅巴土豆" class="headerlink" title="锅巴土豆"></a>锅巴土豆</h3><p><img src="/2019/05/09/四川之行/2-4-2.jpg" alt=""></p><blockquote><p>地点：周签签锅巴土豆</p><p>感慨：点的是招牌的糖醋麻辣味，可能是我对这种甜辣味没啥抵抗力，觉得比恩施炕土豆好吃~</p></blockquote><h3 id="重庆小面"><a href="#重庆小面" class="headerlink" title="重庆小面"></a>重庆小面</h3><p><img src="/2019/05/09/四川之行/2-4-3.jpg" alt=""></p><blockquote><p>地点：无名小店</p><p>感慨：感觉不是很正宗，但吃起来比武汉的重庆小面香一丢丢（主要原因可能是料）</p></blockquote><h3 id="糯米团-酥肉油茶"><a href="#糯米团-酥肉油茶" class="headerlink" title="糯米团+酥肉油茶"></a>糯米团+酥肉油茶</h3><p><img src="/2019/05/09/四川之行/2-4-4-5.jpg" alt=""></p><blockquote><p>地点：四食札记（解放碑店）</p><p>感慨：大众点评上搜的一家早餐店死活找不到在哪，无奈去了这一家，结果发现味道相当好！油茶是我的菜诶，酥肉和馓子泡过之后，香软结合！</p></blockquote><h1 id="打卡篇"><a href="#打卡篇" class="headerlink" title="打卡篇"></a>打卡篇</h1><p>其实我是不太喜欢旅游打卡的，所以去的地方很少。背着包，缓缓地走过大街小巷，体验城市面貌，累了就找个地儿坐着休息，享受宁静，反而是另一番滋味~</p><h2 id="成都打卡"><a href="#成都打卡" class="headerlink" title="成都打卡"></a>成都打卡</h2><p><img src="/2019/05/09/四川之行/3-1-1.jpg" alt=""></p><blockquote><p>地点：春熙路太古里，人民公园，文殊院，宽窄巷子</p><p>感慨：</p><ol><li>熊猫屁股很萌有木有？</li><li>在人民公园逛一圈，会觉得自己的生活节奏也变慢了</li><li>宽窄巷子原来是宽巷子和窄巷子的统称，星巴克都被风格同化了</li></ol></blockquote><p><img src="/2019/05/09/四川之行/3-1-2.jpg" alt=""></p><blockquote><p>地点：玉林路小酒馆</p><p>感慨：</p><ol><li>这里真的只是个打卡的地方，想体验成都真正的酒吧风格还是去九眼桥吧~</li><li>在玉林路上走，脑海中会飘荡着“成都”的歌词，夹杂着离别的伤感</li></ol></blockquote><p><img src="/2019/05/09/四川之行/3-1-3.jpg" alt=""></p><blockquote><p>地点：大熊猫繁育研究基地</p><p>感慨：</p><ol><li>如果是早上去的话，建议八点前或十一点后，因为国宝大多数时候都在睡觉…</li><li>熊猫是真的喜欢拿屁股对着别人，可能是为了卖萌？游玩中看到前面一堆人在呼喊并拿出设备拍摄，走过去才知道是因为熊猫的屁股对着大家大便中，“国宝不想理你们，并给你们一坨翔…”</li></ol></blockquote><h2 id="乐山打卡"><a href="#乐山打卡" class="headerlink" title="乐山打卡"></a>乐山打卡</h2><p><img src="/2019/05/09/四川之行/3-2-1.jpg" alt=""></p><blockquote><p>景点：乐山大佛</p><p>感慨：没错，这就是乐山大佛，据说景点人数相当多，最后只能变成“可远观而不可亵玩焉”，阿弥陀佛~</p></blockquote><h2 id="神木垒打卡"><a href="#神木垒打卡" class="headerlink" title="神木垒打卡"></a>神木垒打卡</h2><p><img src="/2019/05/09/四川之行/3-3-1.jpg" alt=""></p><p><img src="/2019/05/09/四川之行/3-3-2.jpg" alt=""></p><blockquote><p>地点：雅安市神木垒</p><p>感慨：</p><ol><li>山上很多动物，距离他们很近也可以，它们幸福吃东西的样子可以看一天~</li><li>终于看到白牦(mao)牛了，这发型有点非主流，怕在牦牛界也是颜值担当了！</li><li>最惊喜的景色莫过于云散开后出现的神山，旅行团的人都摸摸放下碗筷出来感慨与拍摄，这次就要吹一波华为P30的广角拍摄了，完爆其他所有手机；我第一眼看到神山，震撼了，感觉世界很神奇，此刻我只是一名虔诚的旅客</li></ol></blockquote><h2 id="达瓦更扎打卡"><a href="#达瓦更扎打卡" class="headerlink" title="达瓦更扎打卡"></a>达瓦更扎打卡</h2><p><img src="/2019/05/09/四川之行/3-4-1.jpg" alt=""></p><blockquote><p>地点：达瓦更扎</p><p>感慨：</p><ol><li>是不是跟一般人来达瓦拍的照片不太一样，星空、日出、日落、云海，好吧，我一样都没体验到，我真的是爬山雨神…</li><li>早上七点时，很多人就开始撤了，觉得不可能看到云海，但人群中突然冒出几句“来都来了”，所以最后还是等到了八点，还是没出现，寒风中瑟瑟发抖</li><li>很庆幸自己没有严重的高反~</li></ol></blockquote><h2 id="重庆打卡"><a href="#重庆打卡" class="headerlink" title="重庆打卡"></a>重庆打卡</h2><p><img src="/2019/05/09/四川之行/3-5-1.jpg" alt=""></p><blockquote><p>地点：洪崖洞，八一路，长江索道</p><p>感慨：</p><ol><li>因为就待了一天，就只打卡了渝中区的几个点；第一次体验了青旅，住的很有温馨感，推荐这家！</li><li>我拍的洪崖洞（上左与上右）与网上的洪崖洞（中），区别好大…</li><li>下了索道想往地铁站去，看到地图上明明直线距离就一两百米，硬是上坡到怀疑人生…</li><li>“乘坐XX等列车请在重庆北站北广场搭乘，乘坐XX等列车请在重庆北站南广场搭乘，两地相隔较远”，感觉也就重庆这么剽悍了</li></ol></blockquote><h1 id="总结篇"><a href="#总结篇" class="headerlink" title="总结篇"></a>总结篇</h1><h2 id="如何区分美食？"><a href="#如何区分美食？" class="headerlink" title="如何区分美食？"></a>如何区分美食？</h2><p>火锅、钵钵鸡、油炸串串、麻辣烫、串串、冷锅串串、冒菜…如何区分？？？</p><p><img src="/2019/05/09/四川之行/4-1.jpg" alt=""></p><blockquote><p>图片来源：www.sohu.com/a/259298065_727519</p><p>补充：</p><ol><li>不同地方的分类方式可能存在差异，我在乐山吃的麻辣烫就是有串的（自己煮），和火锅的区别在于汤底含油量很少，因此煮出来更多的是干香</li><li>图里漏了油炸串串，它的关键做法是在油锅里炸串串，吃起来别有一番滋味</li></ol></blockquote><h2 id="吃程"><a href="#吃程" class="headerlink" title="吃程"></a>吃程</h2><p><img src="/2019/05/09/四川之行/4-2.jpg" alt=""></p><blockquote><p>划重点，可见五月一号是多能吃…相信自己的胃！</p></blockquote><h2 id="吃货的心情"><a href="#吃货的心情" class="headerlink" title="吃货的心情"></a>吃货的心情</h2><p>将近一个月的减肥效果，吃了几天全回来了！但让我重选一次的话，我还是会继续去吃，哈哈哈</p><p><img src="/2019/05/09/四川之行/4-3.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还有一个月左右就要结束学生时代，成为一名“真正”的社会人了。为什么说“真正”呢，因为上学的时候一直在外实习，那时也不知道自己到底是一名学生，还是一名社会人，回归学校的这一个多月，反而有些不适应。&lt;/p&gt;
&lt;p&gt;总是开玩笑说我有一丢丢社会恐惧症，可能是性格所致，觉得生活的变化总需要有一些象征性的逗号，好对之前的生活做一次总结，对未来做一些展望。我最终的总结之一就是要出去走走，所以买了去成都的火车票，踏上了这次旅途。成都的朋友们超级给力，带我体会了一次不打卡的旅行~&lt;/p&gt;
&lt;p&gt;“心情不好的时候，就来一顿火锅；如果一顿不能解决问题，那就两顿！”&lt;/p&gt;
    
    </summary>
    
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
      <category term="Tour" scheme="http://yoursite.com/tags/Tour/"/>
    
  </entry>
  
  <entry>
    <title>How to learn Python</title>
    <link href="http://yoursite.com/2019/04/03/How-to-learn-Python/"/>
    <id>http://yoursite.com/2019/04/03/How-to-learn-Python/</id>
    <published>2019-04-03T13:21:15.000Z</published>
    <updated>2019-04-04T03:13:14.097Z</updated>
    
    <content type="html"><![CDATA[<p>在CITYU-商学院-Management Science做RA时，主要任务是inventory与pricing等方面的coding工作，对应paper中的实验部分。该领域科研工作主要侧重点在于理论，期望结合问题的性质，给出model及optimal policy等；但在data-driven的趋势下，老板认为学生应该加强coding工作，故期望我分享如何学习编程，面向的对象为他的博士生。在这一背景下，完成了该slides。</p><p>Slides是我对自己编程学习的总结，抛开厚厚的书本，放弃“打开第一章”的动作，本着实用性的角度出发。</p><a id="more"></a><h1 id="1-What-is-Python？"><a href="#1-What-is-Python？" class="headerlink" title="1. What is Python？"></a>1. What is Python？</h1><p><img src="/2019/04/03/How-to-learn-Python/page1-1.jpg" alt="page1-1"></p><p><img src="/2019/04/03/How-to-learn-Python/page1-2.jpg" alt="page1-2"></p><blockquote><p>[统计来源]: <a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="external">https://www.tiobe.com/tiobe-index/</a></p></blockquote><p><img src="/2019/04/03/How-to-learn-Python/page1-3.jpg" alt="page1-3"></p><blockquote><p>[Python-Wiki]: <a href="https://en.wikipedia.org/wiki/Python_(programming_language" target="_blank" rel="external">https://en.wikipedia.org/wiki/Python_(programming_language</a>)</p><p>[作者Wiki]: <a href="https://en.wikipedia.org/wiki/Guido_van_Rossum" target="_blank" rel="external">https://en.wikipedia.org/wiki/Guido_van_Rossum</a></p><p>他从著名英国喜剧团体Monty Python（巨蟒）身上得到了灵感，他本人也是该剧团的铁杆粉丝</p></blockquote><p><img src="/2019/04/03/How-to-learn-Python/page1-4.jpg" alt="page1-4"></p><blockquote><p>[图片来源]: <a href="https://Itw01.com/4RSDEGA.html" target="_blank" rel="external">https://Itw01.com/4RSDEGA.html</a></p><p>脚本语言每次运行都需要走完全部的运作流程edit-compile-link-run，特点就是interpreted</p></blockquote><p><img src="/2019/04/03/How-to-learn-Python/page1-5.jpg" alt="page1-5"></p><h1 id="2-Python从小白到入门"><a href="#2-Python从小白到入门" class="headerlink" title="2. Python从小白到入门"></a>2. Python从小白到入门</h1><p><img src="/2019/04/03/How-to-learn-Python/page2-1.jpg" alt="page2-1"></p><p><img src="/2019/04/03/How-to-learn-Python/page2-2.jpg" alt="page2-2"></p><blockquote><p>[conda VS pip]: <a href="https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda" target="_blank" rel="external">https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda</a></p></blockquote><p><img src="/2019/04/03/How-to-learn-Python/page2-3.jpg" alt="page2-3"></p><p><img src="/2019/04/03/How-to-learn-Python/page2-4.jpg" alt="page2-4"></p><blockquote><p>标蓝的库为常用库，用anaconda安装Python后，默认也会被安装</p></blockquote><p><img src="/2019/04/03/How-to-learn-Python/page2-5.jpg" alt="page2-5"></p><blockquote><p>[知乎《深度学习的Python包对比》]: <a href="https://www.zhihu.com/question/29412143" target="_blank" rel="external">https://www.zhihu.com/question/29412143</a></p><p>[PyFlux ArimaX introduction]: <a href="https://pyflux.readthedocs.io/en/latest/arimax.html#introduction" target="_blank" rel="external">https://pyflux.readthedocs.io/en/latest/arimax.html#introduction</a></p><p>[强化学习，PyBrain]: <a href="http://pybrain.org/" target="_blank" rel="external">http://pybrain.org/</a></p><p>并行计算的库一般已被集成到其他一些package里，但若是自己手动实现的代码，需自行添加</p></blockquote><h1 id="3-Python从入门到放弃"><a href="#3-Python从入门到放弃" class="headerlink" title="3. Python从入门到放弃"></a>3. Python从入门到放弃</h1><p>初学者看完第1、2章即可，后面的过程很难从编程中感受到快乐……</p><p><img src="/2019/04/03/How-to-learn-Python/page3-1.jpg" alt="page3-1"></p><p><img src="/2019/04/03/How-to-learn-Python/page3-2.jpg" alt="page3-2"></p><p><img src="/2019/04/03/How-to-learn-Python/page3-3.jpg" alt="page3-3"></p><p><img src="/2019/04/03/How-to-learn-Python/page3-4.jpg" alt="page3-4"></p><h1 id="4-操作演示"><a href="#4-操作演示" class="headerlink" title="4. 操作演示"></a>4. 操作演示</h1><p><img src="/2019/04/03/How-to-learn-Python/page4-1.jpg" alt="page4-1"></p><blockquote><p>这里不好放演示内容，故通过文字简单介绍下：</p><ol><li>通过anaconda下载Python后，会自带下一个IDE，即spyder，个人觉得不够轻量级，所以推荐的IDE是微软的Visual Studio Code，下载地址为<a href="https://code.visualstudio.com/" target="_blank" rel="external">https://code.visualstudio.com/</a></li><li>Jupyter Notebook是我非常喜欢的工具（将浏览器作为语言的IDE），类似于Matlab中的cmd，同时支持markdown的书写，可以让说明、公式、代码及每一代码块的运行结果出现在同一界面中，anaconda在安装好Python后也会自动将该工具安装好</li><li>对于不确定的代码，通过Jupyter单步运行，确定性的代码则copy到Visual Studio Code中进行封装</li></ol></blockquote><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><ol><li>学习热情死于安装，但Python环境配置很简单，按上述介绍来即可</li><li>学习语言的最好方式为快速了解基本语法，再结合自己想实现的task，多google即可，书本仅作为查询细节的工具</li><li>多数童鞋想学习的Python的目的为数据处理与数据分析，对应Numpy、Pandas两个库函数，学会google里面输入“Pandas如何实现XXX功能”、“Numpy如何实现XXX功能”</li></ol><p><img src="/2019/04/03/How-to-learn-Python/page4-2.jpg" alt="page4-2"></p><blockquote><p>论和程序猿沟通方式的正确性</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在CITYU-商学院-Management Science做RA时，主要任务是inventory与pricing等方面的coding工作，对应paper中的实验部分。该领域科研工作主要侧重点在于理论，期望结合问题的性质，给出model及optimal policy等；但在data-driven的趋势下，老板认为学生应该加强coding工作，故期望我分享如何学习编程，面向的对象为他的博士生。在这一背景下，完成了该slides。&lt;/p&gt;
&lt;p&gt;Slides是我对自己编程学习的总结，抛开厚厚的书本，放弃“打开第一章”的动作，本着实用性的角度出发。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Study method" scheme="http://yoursite.com/tags/Study-method/"/>
    
  </entry>
  
  <entry>
    <title>GUROBI Example Introduction</title>
    <link href="http://yoursite.com/2018/03/19/GUROBI-Example-Introduction/"/>
    <id>http://yoursite.com/2018/03/19/GUROBI-Example-Introduction/</id>
    <published>2018-03-19T13:26:22.000Z</published>
    <updated>2018-03-23T09:18:10.770Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.gurobi.com/index" target="_blank" rel="external">GUROBI</a>是现阶段求解效率最高的商业最优化求解Solver，与之类似的还有CPLEX、LpSolve、Lingo等，介于研究生与实习期间对该类Solver接触较多，了解到合理使用Solver对求解效率的影响之大，故希望通过这篇博客来一一实现官网的案例（Python版本），对一些运筹学理论进行诠释，并给出一些自己对理论与Solver API的理解。代码使用jupyter重写（.ipynb文件），方便对模块进行解释并演示，详见<a href="https://github.com/hanxiongwei/documents/tree/master/GUROBI_Codes_Analysis" target="_blank" rel="external">代码</a>。</p><a id="more"></a><h1 id="1-A-few-simple-applications"><a href="#1-A-few-simple-applications" class="headerlink" title="1. A few simple applications"></a>1. A few simple applications</h1><h2 id="facility-py"><a href="#facility-py" class="headerlink" title="facility.py"></a><a href="http://www.gurobi.com/documentation/7.5/examples/facility_py.html" target="_blank" rel="external">facility.py</a></h2><p>问题背景是运筹学中经典的<a href="https://en.wikipedia.org/wiki/Facility_location_problem" target="_blank" rel="external">UFLP(Uncapacitated facility location Problem)</a>，下图给出wiki上的介绍：</p><blockquote><p><img src="/2018/03/19/GUROBI-Example-Introduction/CFLP_wiki.jpg" alt="Uncapacitated facility location_wiki"></p><p>大致解释：<br>① 该问题是调度问题的拓展，在需求一定要满足的前提下，决策选择哪些供应点，以保证总成本最小化。总成本中包含固定成本与运输成本，一旦供应点被选作供应，就需付出定额的固定成本，运输成本则来自于供应点到需求点的运输。<br>② 模型中各工厂的需求量一定，都为单位1；变量u表示供给点的最大供应量，其供应不能超过自身能力上限。<br>③ GUROBI程序中描述的问题与之差别为各需求点的需求有差异，且未归一化到1。<br>④ 该问题中，需求侧与供给侧的供应关系为full-connected，实际中可能是semi-connected，或涉及物品的种类不止一种等等，这些都属于问题的变种。</p></blockquote><p>原代码在实现中，建立好model后，找到固定成本最高的供给点，让其初始状态为closed，再进行模型求解，为了研究设计初始值的意义及拓展问题，我做了三组实验。</p><p>实验一为不添加任何初始条件，直接对问题进行求解，求解结果如下（行表示plant，列表示warehouse）：</p><p><img src="/2018/03/19/GUROBI-Example-Introduction/CFLP_sol_one.jpg" alt="CFLP_sol_one"></p><p>结果中可看出，最优的选址与配送方案中，plant-2被关闭，而它恰巧是固定成本最高的供给点，因此原代码在求解前将plant-2的初值设为closed，对结果定无影响。因此在第二组实验中，将固定成本最小的plant-0的初值设为closed，其他供给点则设为open，再次进行求解，结果如下：</p><p><img src="/2018/03/19/GUROBI-Example-Introduction/CFLP_sol_two.jpg" alt="CFLP_sol_two"></p><p>结果与实验一相同，原因在于初值的设立未改变决策变量的可取范围，故不影响模型的最终求解，而只影响求解过程。GUROBI会根据送入的初值，构建一个可行解，并用该可行解作为Branch and Bound中的初始Bound，Bound较好则可加速Branch and Bound的剪枝过程，提升求解效率（关于B&amp;B算法的解释，可参考<a href="https://hanxiongwei.github.io/2017/10/28/Introduction-To-Operation-Research/#5-MIP-Solver-Core" target="_blank" rel="external">MIP Solver Core</a>）。我对两次实验的求解时间做了比较，差距不明显（52ms vs 63ms），原因在于问题规模较小，提速不明显。</p><p>现实生活中，由于某些不可抗因素，某些供应点需要强行关闭。针对这一类情况，我设计了实验三，随机选取一个供应点，强制让其在model求解中处于closed状态（前提是剩余的总供应不小于总需求，否则model无解），实现方式有两种：①为变量添加新约束，让其小于等于0；②将决策变量（BINARY类型）的UB设置为0。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 假设plant-0被选为不采用</span></div><div class="line"><span class="comment"># 方式一：</span></div><div class="line">m3.addConstr(open[p] &lt;= <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 方式二：</span></div><div class="line">open[p].UB = <span class="number">0.0</span></div></pre></td></tr></table></figure></p><p>当plant-1需关闭时，此时model的最优解中，plant-1的状态为closed，总成本上升，求解结果如下：</p><p><img src="/2018/03/19/GUROBI-Example-Introduction/CFLP_sol_three.jpg" alt="CFLP_sol_three"></p><blockquote><p><strong>补充<1></1></strong><br>model.write()：该语句能将输入到GUROBI中的model进行输出，便于调试；输出的格式有多种（不同格式对应model中的不同内容），使用较多的是lp文件，它可输出model的数学表达式，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">m1.write(<span class="string">'facility_p1.lp'</span>)</div></pre></td></tr></table></figure></p><p>输出内容：</p><p><img src="/2018/03/19/GUROBI-Example-Introduction/CFLP_model.jpg" alt="CFLP_model"></p><p><strong>补充<2></2></strong><br>构建约束时尽量避免等式约束，有时目标的优化方向会让约束自动向等号逼近（如问题中对各供给点的供应量）</p><p><strong>补充<3></3></strong><br>原程序中，将model的Method参数设置为2，这是在MIP求解中改变对root node的松弛问题的求解方式，与之相似的参数还有NodeMethod，之后会作为一个专门的专题来讲解。</p></blockquote><h1 id="2-Illustrating-specific-features"><a href="#2-Illustrating-specific-features" class="headerlink" title="2. Illustrating specific features"></a>2. Illustrating specific features</h1><h2 id="sensitivity-py"><a href="#sensitivity-py" class="headerlink" title="sensitivity.py"></a><a href="http://www.gurobi.com/documentation/7.5/examples/sensitivity_py.html" target="_blank" rel="external">sensitivity.py</a></h2><p>灵敏性分析侧重于研究模型不确定性对输出结果的影响，不确定性包括多类，有变量不确定性、常量（资源限量、价值常量…）不确定性、约束不确定性等等，这在研究模型鲁棒性、模型各模块与输出的关系等上十分重要。先抛出wiki上的介绍，<a href="https://en.wikipedia.org/wiki/Sensitivity_analysis" target="_blank" rel="external">链接直达</a>：</p><blockquote><p><img src="/2018/03/19/GUROBI-Example-Introduction/sensitivity_wiki.jpg" alt="Sensitivity Analysis"></p></blockquote><p>不确定性情况发生时，较直观的想法是修改模型，重新求解。这对复杂的模型很不友好，因反复重新求解需要消耗大量时间。使用GUROBI的好处在于，对模型做部分修改并再次优化时，它能基于上次优化的结果继续求解（原理猜想：基于heuristic，将原模型的最优解修复为增加不确定性后新模型的可行解，得到较好的Upper Bound[in Minimize Problem]，加速Branch and Bound求解过程中的剪枝），快速反映结果，提升效率。</p><p>本代码主要研究如何通过GUROBI对决策变量做灵敏度分析，主要关注的决策变量类型为BINARY，BINARY在分析时相对较简单，因为它的取值范围仅有两类，分析时候仅需将0→1或1→0。<br>我采用’facility.py’中研究的模型作为输入，模型中BINARY变量为供应点的状态(1:open / 0:closed)，在模型求得最优解后，分别改变每个变量的取值，重新求解，观察值的改变对成本目标的影响。下图为最终分析结果：</p><p><img src="/2018/03/19/GUROBI-Example-Introduction/SA_result.jpg" alt="Sensitivity Analysis Result"></p><p>从中可以看出，plant-2与plant-4的状态变量的改变对成本目标函数的影响最小。</p><blockquote><p><strong>补充<1></1></strong><br>若需对INTEGER变量做灵敏性分析时，修改的方式与上述类似，通过改变BOUND（LB / UB）或者添加约束限制变量的取值范围。</p><p><strong>补充<2></2></strong><br>在coding时，应尽量避免数值误差（虽然GUROBI在这一块已十分完善），如判断BINARY变量的取值是0还是1时，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">open[plant]._origX &lt; <span class="number">0.5</span> <span class="comment"># True</span></div><div class="line">open[plant]._origX == <span class="number">0</span> <span class="comment"># False，计算得到的值可能是0.0000...00001</span></div></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.gurobi.com/index&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GUROBI&lt;/a&gt;是现阶段求解效率最高的商业最优化求解Solver，与之类似的还有CPLEX、LpSolve、Lingo等，介于研究生与实习期间对该类Solver接触较多，了解到合理使用Solver对求解效率的影响之大，故希望通过这篇博客来一一实现官网的案例（Python版本），对一些运筹学理论进行诠释，并给出一些自己对理论与Solver API的理解。代码使用jupyter重写（.ipynb文件），方便对模块进行解释并演示，详见&lt;a href=&quot;https://github.com/hanxiongwei/documents/tree/master/GUROBI_Codes_Analysis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="GUROBI" scheme="http://yoursite.com/tags/GUROBI/"/>
    
      <category term="Example Explanation" scheme="http://yoursite.com/tags/Example-Explanation/"/>
    
      <category term="Principle，Python" scheme="http://yoursite.com/tags/Principle%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Operation Research and Machine Learning</title>
    <link href="http://yoursite.com/2018/03/13/Operation-Research-and-Machine-Learning/"/>
    <id>http://yoursite.com/2018/03/13/Operation-Research-and-Machine-Learning/</id>
    <published>2018-03-13T14:46:32.000Z</published>
    <updated>2018-05-09T16:53:04.485Z</updated>
    
    <content type="html"><![CDATA[<p>实习期间研究的方向之一就是如何将machine learning的技术与运筹学结合，加速求解过程，运用到华为供应链场景。依据这个突破点，外加自身对这一块有着浓厚的兴趣，故查阅了近几年结合的研究进展，发现在运筹学传统的技术上，一旦加上learning，就可以投较好的期刊或会议，如《A machine learning -based approximation of strong branching》——INFORMS Journal of Computing、《learning to search in branch and bound Algorithms》——NIPS…<br>不难看出，这一研究领域是未来学术界与业界的热门方向，因此本文将自身的理解、学习进展进行记录与分享。</p><a id="more"></a><h1 id="1-运筹学与机器学习的区别是什么？"><a href="#1-运筹学与机器学习的区别是什么？" class="headerlink" title="1.运筹学与机器学习的区别是什么？"></a>1.运筹学与机器学习的区别是什么？</h1><p>此问题是Noah Lab实习面试中，leader的问题之一。当时我给出的回答是：“机器学习侧重于从数据中挖掘潜在分布，以响应未知领域，关键是拟合；运筹学则侧重于对问题的抽象，建立能精确描述问题的数学模型，并利用相关算法求得最优解。”leader追问：“机器学习问题也要建立数学模型，为什么它求得的总是有误差，是近似解，而运筹学中能求得最优解呢？导致这种差异的本质是什么呢？”说实话，我后来就有点懵圈…</p><p>那时刚接触机器学习，侧重于了解算法。知道机器学习中的经典模型有逻辑回归、SVM、决策树，求解算法有梯度下降（逻辑回归）、最大信息增益（Tree model）、BP（神经网络）；运筹学中的经典模型有TSP、Knapsack、Bin Packing、Scheduling，求解算法则包括启发、元启发、超启发、精确解算法等等。当时没从结合上去理解，总觉得是截然不同的内容，了解深入后，才发现都是一个套路，万变不离其宗——数学。</p><p>这里我先给出我的结论，后序做详细的解释：</p><blockquote><p><strong>定义：区分机器学习与运筹学的关键在于先验知识的强弱，依据其差距，两者产生了各自的方法论。</strong></p></blockquote><p>了解异同点之前，补充一下求解问题的通用范式：建立数学模型（问题抽象）→获取数据→设计求解算法（问题求解）→结果分析与评估</p><h2 id="1-1-模型层面"><a href="#1-1-模型层面" class="headerlink" title="1.1.模型层面"></a>1.1.模型层面</h2><p>现实问题可大致分为两类：离散优化与连续优化。运筹学的研究范畴中，两者都包含，考虑到其发展背景，研究的问题（模型）大多包含众多复杂的限制条件（约束），且其中以离散优化问题居多（即组合优化）；机器学习则侧重于连续优化（问题本身离散时，建模时也会尽量将解空间松弛为连续域），期望拟合一个分布，模型中一般不包含约束（少量模型存在约束，如SVM）。</p><p>机器学习相关问题中，对问题内在结构了解较模糊，因此仅能借助于数据驱动的方式，期望从数据中挖掘出问题的潜在分布，便于管理者做决策。而运筹学问题中，问题限制能被描述为一条条的数学公式（等式与不等式），解空间（问题结构）已经被公式所限定，所做的问题是如何在其中找到最优解，因此具备更强的先验知识。</p><p>举例说明：</p><p>Example_1.假设现在我们要预测某个房屋的价格，方便做出是否购入的决策，传统机器学习的做法是收集数据，提取特征（房屋面积、地段房屋均价、朝向等等），然后建立房价预测模型（以最小化LOSS为目标的连续优化问题），训练参数，最后将需预测的房屋的相关数据录入到训练好的模型中，得到预测的房价；若现处于上帝视角，能清晰知道房屋的价格与各因素的关系，如：价格不小于卧室面积的A倍与非卧室面积B倍之和，同时价格不会高于地段房价均值的1.2倍，又因我们是购买者，期望以最小成本完成购买任务，因此目标是最小化房价。</p><p>第一种方案求得的解较难验证，第二种则一定是存在于解空间中的最优状态，故对问题内在结构很清晰时，第二种更优。</p><p><img src="/2018/03/13/Operation-Research-and-Machine-Learning/example_1.jpg" alt="Price Prediction"></p><p>Example_2.装箱问题是运筹学中的经典问题，现存在一些长宽高不等的item与同质的箱子，期望以最小的箱子个数将item装载完。看到这个问题，很多人会觉得不难，毕竟该问题的数学模型已被学者们研究得十分透测，考虑箱子内在装载结构，以item被装载时不超过箱子边界（overlap）为约束，最小化箱子使用个数为目标，有基本model、set cover model等形式。问题该类表达中，一个大前提是item与箱子的基础数据（长宽高）皆已知，这是一个很强的先验知识。若现在问题改为长宽高数据未知，要如何处理呢？从机器学习的角度看，若能获取历史装箱数据，即：（m1个item1，m2个item2,m3个item3，…，n1箱子数），基于此数据构造特征（item总长、总宽、总高…，n1箱子），建立二分类问题（1：可装完 / 0：不可装完），训练二分类模型，之后便可将新item的数据转换为特征，将箱子个数特征上从0开始不断增加1，当model第一次输出1时，即为输出的最小的箱子使用个数（或直接建立以箱子个数为label的预测模型）。</p><p><strong>从例子中可看出，运筹学中在抽象实际问题时，具备更多的先验知识，得到的解更能被接受。</strong></p><blockquote><p>两者研究的问题基本都是NP-Hard问题，如运筹学中的TSP、Bin Packing等，机器学习领域中的KNN、Decision Tree Model等等。</p></blockquote><h2 id="1-2-算法层面"><a href="#1-2-算法层面" class="headerlink" title="1.2.算法层面"></a>1.2.算法层面</h2><p>我们在两个领域内总能听到不同的算法，运筹学中，当问题需求得精确解时，线性规划中的单纯形法，整数规划中的DP、Branch and Bound、Cut-Plane算法往往听的比较多，求较优近似解时，则是进化算法、SA、Tabu Search等。而谈到机器学习，则有梯度下降、SMO、信息增益（ID3）、Lloyd Algorithm（KNN）等等。</p><p><strong>算法层面上，两个领域的知识是相通的，因为所有的算法其实无外乎两类，精确算法与近似算法。</strong></p><blockquote><p>补充：对各种算法进行划分时，需结合求解问题的背景，如问题的解空间为凸时，梯度下降法可求得全局<br>，属于精确算法；但解空间非凸时，梯度下降法仅能求得一个局部最优解，此时属于近似算法。</p></blockquote><p><strong>精确算法是聪明的暴力搜索，指导好的搜索方向，当搜索到劣质的解空间时，及时制止。</strong></p><p>精确算法在机器学习领域中听的比较少，原因在于问题规模往往较大（数据量大），在有限的计算资源下，很难求得最优解，因此近似优化算法居多，更多的研究方向在于针对特定的模型，如何改进优化算法，使求得的解更好。常用的思路是增加算法的随机性，在收敛能力与随机上做好trade-off，随机性的带入能在搜索中辅助跳出局部最优，但随机性过多带入会导致算法的搜索能力较弱，与random searching无异。这里给出一篇网上的博客<a href="https://blog.csdn.net/shuzfan/article/details/75675568" target="_blank" rel="external">《梯度下降优化算法总结》</a>，介绍梯度下降法的改进策略，便于理解上述提到的trade-off。</p><p>运筹学领域，精确算法往往只能在中小规模问题上发挥作用，但由于该类算法能给出BOUND（即使在有限时间内无法求得最优解，通过Branch and Bound等算法也能返回问题较优的上（下）界，即全局最优解的极限值），且十分方便做并行化，故受一些学者青睐。大规模问题上，现阶段还是近似算法更被看好，如Hill Climbing等，为防止算法过早陷入局部最优，也会往其中增加随机性，如Tabu Search中的禁忌策略、GA中的变异及种群多样性维持策略、ACO中路径选择一般采用轮盘转法等等（GA、ACO等都属于仿生算法，是一种搜索框架，框架本身具备一定收敛能力[玄学…]，在设计时往往添加适合问题的operator并融入随机性）。</p><p><strong>因此，从算法层面分析，两者设计思想基本等同，权衡收敛能力与随机性之间的trade-off</strong></p><blockquote><p>补充：精确解中也存在两者的权衡，如分支定界算法中分支策略的选取，后续描述会提到。</p></blockquote><h2 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3.小结"></a>1.3.小结</h2><ol><li><p>机器学习与运筹学的主要区别？——先验知识的强弱。</p></li><li><p>机器学习问题结果为什么总存在误差，运筹学却能求得精确解？——先要明确有误差不等同于没找到精确解，且运筹学中也会存在误差。机器学习中，当数据量较大时，难以求得精确解，会造成误差，但即使求得了精确解，误差也是存在的。原因在于先验知识的缺少导致问题从数据建模（按先验知识给定的模型与实际可能存在一定差距），并且用模型做泛化时，未知信息进一步增加，这些都是导致误差的原因。运筹学的模型是从解的结构出发，约束能正确描述解空间的区域，求得精确解，但该解不一定是实际需求完全对应（问题的抽象可能存在一定误差），复杂问题的规模较大，可能得不到最优解（MIP-Gap），因此存在误差也是可能的。</p></li><li><p>复杂度层面，机器学习的规模来源于庞大的训练数据，运筹学则来源于问题描述的复杂度（大量约束、复杂目标…），求解算法的设计套路类似。</p></li></ol><blockquote><p>广义上，有人认为机器学习是运筹学的一个应用领域<a href="http://www.sohu.com/a/212747871_717210" target="_blank" rel="external">链接直达</a>；更广义的说，都是数学…</p></blockquote><h1 id="2-谈一谈最优解与较优可行解"><a href="#2-谈一谈最优解与较优可行解" class="headerlink" title="2.谈一谈最优解与较优可行解"></a>2.谈一谈最优解与较优可行解</h1><h2 id="2-1-最优解"><a href="#2-1-最优解" class="headerlink" title="2.1.最优解"></a>2.1.最优解</h2><p><strong>求得现实问题的最优解是件较困难的事。</strong></p><p>有人会问，上述讲解算法分类时不是有精确算法这一说吗，当我们得到问题的抽象模型后，利用精确解算法，即可得到问题的最优解。但关键问题有两点：a.抽象的数学模型是否能真实反映实际；b.能否在有限的计算能力下求得问题的全局最优解。</p><p>针对a，这里引入一句很精炼的总结，出自中科大教授唐珂来华为介绍演化计算时，slides上的一句话：</p><blockquote><p>“用数学规划，求近似问题的精确解；用演化计算，求精确问题的近似解”——唐珂</p></blockquote><p>演示时以机器学习中的二分类问题为例，很容易得知二分类问题的损失函数是阶梯函数（分类True or False），但因该函数不可导，故用sigmoid函数进行替换；此操作后，我们实际求解的问题即为原问题的一个近似问题，我们还需要验证近似问题的最优解与原问题的最优解相对应才行。问题抽象的难度来源不仅仅是目标函数，约束有时也难以定义成表达式或定义成表达式后无法用数学规划的方式求解，如：A &gt;= B xor (C and D)…</p><p>再来说b，当问题的变量、约束较多时，解空间过大，在有限的计算资源下，精确解算法很难求得最优解，因此一般的Solver都会提供提前终止搜索的接口，如Time Limit或者Max Gap（Upper Bound与Lower Bound之间的差距小于给定阈值时停止搜索），此时求得的解也不是全局最优解。</p><h2 id="2-2-较优可行解"><a href="#2-2-较优可行解" class="headerlink" title="2.2.较优可行解"></a>2.2.较优可行解</h2><p><strong>较优可行解的求解方式灵活很多，但得不到Bound的它就没有终极目标——一只努力拼搏却缺乏一丝灵魂的奋斗者。</strong></p><p>上述已提到过近似算法的设计核心，即收敛能力与随机性之间的权衡。较优可行解往往在工业界接受的比较多，企业更多的关心是当前算法比前一版本提高程度，同时，技术人员的最优与业务人员的最优往往存在差异。</p><h1 id="3-Machine-Learning与Operation-Research结合举例"><a href="#3-Machine-Learning与Operation-Research结合举例" class="headerlink" title="3.Machine Learning与Operation Research结合举例"></a>3.Machine Learning与Operation Research结合举例</h1><p><strong>哪里有计算开销大的地方，哪里就可尝试使用learning做近似，训练一个evaluation function</strong></p><h2 id="3-1-In-Exact-Algorithm"><a href="#3-1-In-Exact-Algorithm" class="headerlink" title="3.1.In Exact Algorithm"></a>3.1.In Exact Algorithm</h2><ol><li><p>Branch and Bound中，好的树节点搜索顺序能使得Bound收敛的更快，加速剪枝过程，从而提高求解效率，传统的方法有广度优先、深度优先等，《learning to search in branch and bound Algorithms》则学得一个自适应的searching order。</p></li><li><p>Branch and Bound中，分支策略尤为重要，尽可能保证分支两侧的解空间均匀，且具有更好的Bound，好的分支策略往往需要高计算开销，《A machine learning -based approximation of strong branching》、《Learning to branch in mixed integer programming》、《Towards Learning Integral Strategy of Branch and Bound》…皆提出学得一个branch strategy的evaluation function出来，加速该过程。</p></li><li><p>以decomposition（Dantzig-Wolfe）为依托，《Learning whe to use a decomposition》。</p></li><li><p>以Column Generation为依托，用trained model生成pricinng problem的近似，并做出修正。</p></li><li><p>Reinforcement Learning</p></li></ol><h2 id="3-2-In-Heuristic-Algorithm"><a href="#3-2-In-Heuristic-Algorithm" class="headerlink" title="3.2.In Heuristic Algorithm"></a>3.2.In Heuristic Algorithm</h2><ol><li>《Small Boxes Big Data: A Deep Learning Approach to Optimize Variables Sized Bin Packing》中，用neural network训练一个分类器，输出对当前算例所执行的最好的启发式算法的编号（训练数据中实现了八种启发式算法，以最优算法编号作为label）。</li></ol><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p><a href="https://www.zhihu.com/question/24976006" target="_blank" rel="external">机器学习的算法和普通《算法导论》里的算法有什么本质上的异同？</a><br><a href="https://www.zhihu.com/question/24720853" target="_blank" rel="external">运筹学与最优化有什么关系？</a><br><a href="https://www.zhihu.com/question/65151551/answer/243104981" target="_blank" rel="external">深度学习如何影响运筹学？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习期间研究的方向之一就是如何将machine learning的技术与运筹学结合，加速求解过程，运用到华为供应链场景。依据这个突破点，外加自身对这一块有着浓厚的兴趣，故查阅了近几年结合的研究进展，发现在运筹学传统的技术上，一旦加上learning，就可以投较好的期刊或会议，如《A machine learning -based approximation of strong branching》——INFORMS Journal of Computing、《learning to search in branch and bound Algorithms》——NIPS…&lt;br&gt;不难看出，这一研究领域是未来学术界与业界的热门方向，因此本文将自身的理解、学习进展进行记录与分享。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Operation Research" scheme="http://yoursite.com/tags/Operation-Research/"/>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Inner-connection" scheme="http://yoursite.com/tags/Inner-connection/"/>
    
  </entry>
  
  <entry>
    <title>2017 SUMMARY</title>
    <link href="http://yoursite.com/2018/01/17/2017-SUMMARY/"/>
    <id>http://yoursite.com/2018/01/17/2017-SUMMARY/</id>
    <published>2018-01-17T01:38:13.000Z</published>
    <updated>2019-05-09T13:09:17.720Z</updated>
    
    <content type="html"><![CDATA[<p>自从做了上班狗，明显感觉时间流逝的更快。我总在想是否因生活态度变懒散了，虽然每天的生活两点一线（家里、公司），也成了痛苦的早起一族，但时间不够用的感觉变多了，后来发觉是因为自身思维困惑的时间变多了，清醒来想搞事情时，已离deadline越来越近，此时急迫的心情降低了工作效率，这种现状让我等水瓶座又进入思维困惑，恶性循环发生…<br>所以我对这份2017的总结十分重视，也许是觉得17年平凡无奇而又刻骨铭心。平凡无奇来自于对去年整体记忆的模糊，刻骨铭心则是细想起来，却发生了使我生活改变很多的变故。</p><a id="more"></a><blockquote><p>愿你在被打击时，记起你的珍贵，抵抗恶意。愿你在迷茫时，坚信你的珍贵，爱你所爱，行你所行，听从你心，无问西东。 ——《无问西东》</p></blockquote><h1 id="From-2017"><a href="#From-2017" class="headerlink" title="From 2017"></a>From 2017</h1><h2 id="gt-足迹"><a href="#gt-足迹" class="headerlink" title=">&gt;足迹"></a>>&gt;足迹</h2><ul><li>北京</li><li>上海</li><li>天津</li><li>湖北-&gt;武汉、鄂州</li><li>广东-&gt;广州、深圳、佛山</li><li>山西-&gt;大同、平遥</li><li>香港</li><li>澳门</li></ul><hr><h2 id="gt-演唱会"><a href="#gt-演唱会" class="headerlink" title=">&gt;演唱会"></a>>&gt;演唱会</h2><center>Zero</center><hr><h2 id="gt-户外运动"><a href="#gt-户外运动" class="headerlink" title=">&gt;户外运动"></a>>&gt;户外运动</h2><ul><li>马拉松-&gt;武汉半程马拉松（半马）、校园马拉松华科站（5km）、深圳线上马拉松（10km）</li><li>爬山-&gt;北岳恒山（山西）、大梧桐山（深圳）</li><li>徒步-&gt;南丫岛</li></ul><hr><h2 id="gt-比赛"><a href="#gt-比赛" class="headerlink" title=">&gt;比赛"></a>>&gt;比赛</h2><ul><li>机甲大师-大学生机器人大赛（深圳）</li></ul><hr><h2 id="gt-影院电影"><a href="#gt-影院电影" class="headerlink" title=">&gt;影院电影"></a>>&gt;影院电影</h2><ul><li>功夫瑜伽</li><li>西游伏妖篇</li><li><strong>爱乐之城</strong></li><li>生化危机：终章</li><li><strong>非凡任务</strong></li><li>摔跤吧爸爸</li><li>加勒比海盗5</li><li>神偷奶爸3</li><li>悟空传</li><li><strong>建军大业</strong></li><li><strong>侠盗联盟</strong></li><li><strong>敦刻尔克</strong></li><li>羞羞的铁拳</li><li>雷神3诸神黄昏</li><li>天生不对</li><li>寻梦环游记</li><li>帕丁顿熊2</li><li><strong>芳华</strong></li><li><strong>猫妖传</strong></li></ul><hr><h2 id="gt-实践"><a href="#gt-实践" class="headerlink" title=">&gt;实践"></a>>&gt;实践</h2><h3 id="华为诺亚方舟实验室（实习）"><a href="#华为诺亚方舟实验室（实习）" class="headerlink" title="华为诺亚方舟实验室（实习）"></a>华为诺亚方舟实验室（实习）</h3><ul><li>企业智能小组——聚焦华为范网络供应链场景，运用AI技术进行流程优化。</li><li>Production Planning Problem / Scheduling Problme / Enterprise Corruption Detection</li></ul><h3 id="“数据魔术师”自媒体平台"><a href="#“数据魔术师”自媒体平台" class="headerlink" title="“数据魔术师”自媒体平台"></a>“数据魔术师”自媒体平台</h3><ul><li>访问“阿尔法洞”自媒体团队，借鉴成功创业的经验</li><li>依托微信公众号平台，以“大数据解释生活”为突破口</li><li>平台运作模式的设计与初期运营</li><li>达成半年2W粉丝小目标</li></ul><hr><h2 id="gt-项目经历与成果"><a href="#gt-项目经历与成果" class="headerlink" title=">&gt;项目经历与成果"></a>>&gt;项目经历与成果</h2><h3 id="逆变器整机排产一期"><a href="#逆变器整机排产一期" class="headerlink" title="逆变器整机排产一期"></a>逆变器整机排产一期</h3><ul><li>逆变器——华为范网络能源产品</li><li>考虑订单、预测、产能、在制、成本（库存成本、缺货成本、换线成本）及一些特殊业务规则（Multi-objective Combinational Optimization Problem）</li><li>在满足订单高交付的同时，降低库存</li><li>MIP Solver / EDA</li><li>规模：（100+） * （10+） * （10+）</li></ul><h3 id="急单预测及加工提前量设计"><a href="#急单预测及加工提前量设计" class="headerlink" title="急单预测及加工提前量设计"></a>急单预测及加工提前量设计</h3><ul><li>定义急单，从急单率着手进行预测</li><li>结合订单量、预测量、BOM信息（层级关系、加工周期等），对提前制造量做决策</li><li>规模：4000+</li></ul><h3 id="“数据魔术师”创办与推文攥写"><a href="#“数据魔术师”创办与推文攥写" class="headerlink" title="“数据魔术师”创办与推文攥写"></a>“数据魔术师”创办与推文攥写</h3><ul><li>大数据分析推文6篇</li></ul><ol><li><a href="http://mp.weixin.qq.com/s/KmqrvlvQste55T_IccV_1A" target="_blank" rel="external">江城七校，吃喝玩乐，谁才是荣耀王者？</a></li><li><a href="http://mp.weixin.qq.com/s/TSbv6aGse0tGk_-xrljpAw" target="_blank" rel="external">女朋友有严重的选择困难症，我要不要和她分手？</a></li><li><a href="http://mp.weixin.qq.com/s/Nea4gpLFRHyfpwxar7twLA" target="_blank" rel="external">高校曝光度与排名不得不说的那些事儿</a></li><li><a href="http://mp.weixin.qq.com/s/yhsn3W87Uw-Z1HSRfFAzxw" target="_blank" rel="external">震惊！20余万条酒店数据揭示中国酒店价格七律</a></li><li><a href="http://mp.weixin.qq.com/s/-K8QKq5rR8V8mHDMrSgHTA" target="_blank" rel="external">以人民的名义，反腐倡廉！财政部差旅住宿费标准如何更合理？</a></li><li><a href="http://mp.weixin.qq.com/s/7KzvlLO7tBfx95Q2_Unwng" target="_blank" rel="external">另类“一流”大学排名出炉，你的大学排第几位？</a></li></ol><ul><li>技术推文2篇</li></ul><ol><li><a href="http://mp.weixin.qq.com/s/I7c0DQqYM0jIdKEh2NjyTg" target="_blank" rel="external">干货 | 到底是什么算法，能让人们如此绝望？</a></li><li><a href="https://mp.weixin.qq.com/s/c6SqyOZQD1md115UbKDx9g" target="_blank" rel="external">数据技术｜十分钟教会你写网络爬虫程序</a></li></ol><ul><li>阅读量破万 / 粉丝破万 / …</li></ul><h3 id="Hust-OI-Team官网设计与开发"><a href="#Hust-OI-Team官网设计与开发" class="headerlink" title="Hust OI Team官网设计与开发"></a>Hust OI Team官网设计与开发</h3><ul><li><a href="http://msor-world.com/" target="_blank" rel="external">HUST OI Team</a></li><li><a href="https://hanxiongwei.github.io/2018/01/06/First-Website-Design/" target="_blank" rel="external">项目详情</a></li></ul><h3 id="Github博客搭建"><a href="#Github博客搭建" class="headerlink" title="Github博客搭建"></a>Github博客搭建</h3><ul><li><a href="http://hanxiongwei.github.io/" target="_blank" rel="external">博客链接</a></li></ul><h3 id="CNN实现Mnist数据集（Kaggle）分类"><a href="#CNN实现Mnist数据集（Kaggle）分类" class="headerlink" title="CNN实现Mnist数据集（Kaggle）分类"></a>CNN实现Mnist数据集（Kaggle）分类</h3><ul><li>Keras实现</li><li><a href="https://hanxiongwei.github.io/2017/11/05/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%80%BB%E7%BB%93/" target="_blank" rel="external">详细介绍</a></li></ul><h3 id="天池——大航杯“智造扬中”电力AI大赛"><a href="#天池——大航杯“智造扬中”电力AI大赛" class="headerlink" title="天池——大航杯“智造扬中”电力AI大赛"></a>天池——大航杯“智造扬中”电力AI大赛</h3><ul><li>第一轮数据准确率75.4%，排名前二十，无奈过拟合严重…</li><li>第一赛季最终排名：422 / 47.8848%</li></ul><hr><h2 id="新技能掌握"><a href="#新技能掌握" class="headerlink" title="新技能掌握"></a>新技能掌握</h2><h3 id="熟练掌握"><a href="#熟练掌握" class="headerlink" title="熟练掌握"></a>熟练掌握</h3><ul><li>Python</li><li>PHP</li><li>Gurobi</li><li>Pandas</li><li>Sklearn</li><li>Linux command</li></ul><h3 id="基本掌握-or-偶尔使用"><a href="#基本掌握-or-偶尔使用" class="headerlink" title="基本掌握 or 偶尔使用"></a>基本掌握 or 偶尔使用</h3><ul><li>Xgboost</li><li>Docker</li><li>Keras</li><li>Threading / Multiprocessing</li><li>Statsmodels（Arima）</li><li>Graphviz</li><li>Spark</li><li>DB（MySql / MongoDB / Oracle）</li></ul><hr><h2 id="算法储备"><a href="#算法储备" class="headerlink" title="算法储备"></a>算法储备</h2><ul><li>进化算法</li></ul><ol><li>EDA（Estimation Distribution Algorithm）</li></ol><ul><li>OR如何与Machine Learning结合</li></ul><ol><li>用Learning指导分支定界算法中的policy function（branching strategy、node selection strategy…）</li><li>用Learning指导heuristic中算子的选取</li><li>…</li></ol><ul><li>机器学习学习经历</li></ul><ol><li>Machine Learning：《统计学习方法》、《西瓜书》</li><li>Deep Learning：Blog、《深度学习》</li><li>Reinforcing Learning：Alpha Go、《西瓜书（最后一章）》、《A Introduction To Reinforcing Learning：Part Two》、MCTS</li><li>Time Series：Arima</li><li>…</li></ol><hr><h1 id="To-2018"><a href="#To-2018" class="headerlink" title="To 2018"></a>To 2018</h1><p>2018是本命年啦，本命年到底会好事连连还是噩耗不断，众说纷纭，但我相信会是第一种~</p><p>对今年列了一些小目标的，这个我就直接写在自己的小本本上了~ </p><p>希望自己不忘初心。</p><p><img src="/2018/01/17/2017-SUMMARY/2017-2018.jpg" alt="2017-2018"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从做了上班狗，明显感觉时间流逝的更快。我总在想是否因生活态度变懒散了，虽然每天的生活两点一线（家里、公司），也成了痛苦的早起一族，但时间不够用的感觉变多了，后来发觉是因为自身思维困惑的时间变多了，清醒来想搞事情时，已离deadline越来越近，此时急迫的心情降低了工作效率，这种现状让我等水瓶座又进入思维困惑，恶性循环发生…&lt;br&gt;所以我对这份2017的总结十分重视，也许是觉得17年平凡无奇而又刻骨铭心。平凡无奇来自于对去年整体记忆的模糊，刻骨铭心则是细想起来，却发生了使我生活改变很多的变故。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
      <category term="Skill" scheme="http://yoursite.com/tags/Skill/"/>
    
      <category term="Project" scheme="http://yoursite.com/tags/Project/"/>
    
      <category term="Experience" scheme="http://yoursite.com/tags/Experience/"/>
    
  </entry>
  
  <entry>
    <title>First Website Design</title>
    <link href="http://yoursite.com/2018/01/06/First-Website-Design/"/>
    <id>http://yoursite.com/2018/01/06/First-Website-Design/</id>
    <published>2018-01-06T03:15:08.000Z</published>
    <updated>2018-01-06T17:31:57.412Z</updated>
    
    <content type="html"><![CDATA[<p>这是我第一次一个人单独设计并开发一个网站，需求来源大致是研究生团队的老师们希望能拥有一个团队展示平台，用以对外宣传。而调研中发现外包的费用较高，就在群里询问是否有学生感兴趣，刚好那段时间所写论文的实验结果一直难以有提升，并想到本科时用C#独立开发过一个信息系统，就揽下了这活儿，赚点外快，却没想到前前后后还是很多坑，但最后还是坚持的落实了需求。虽然我自己后来的发展方向也不与信息系统相关，但这份经历算是我17年的成果之一，故借此机会，对其好好做个总结。对于一个之前从未接触PHP、MySQL的我来说，心中的信念就是“逢山开路，遇水搭桥！”亦或是“知知为知知，不知百度知，百度不知谷歌知！”这份总结我也会分享很多技术干活，相信阅读完后对搭建系统就不再那么神秘了。</p><a id="more"></a><h1 id="系统介绍"><a href="#系统介绍" class="headerlink" title="系统介绍"></a>系统介绍</h1><p>既然要吹牛逼，当然是先上图，网站链接是<a href="http://msor-world.com/" target="_blank" rel="external">HUST OI Team</a>，因开发时间零散，故两个多月才完成交付。系统的前、后台界面如下（因为网站采用响应式前端框架，手机上浏览界面更佳！）：</p><p><img src="/2018/01/06/First-Website-Design/front_page.png" alt="The front page of website"></p><p>后台界面是方便管理员管理网站信息的（成员、新闻、成果等）</p><p><img src="/2018/01/06/First-Website-Design/behind_page.png" alt="The behind page of website"></p><p>用一句话来描述我开发的网站：“搭建了一套基于Bootstrap+PHP+MySQL的响应式CMS”</p><blockquote><p><strong>补充：</strong>很多人可能会对网站与系统的概念难以区分，这里给出我的理解：大框架上两者同质，但网站更偏重于UI，而系统则偏重于后台的逻辑处理。很多人概念模糊可能是对网站与网页理解不清晰，绝大多数公司在招聘时，会将程序猿区分为前端开发与后台开发，前者侧重UI侧（B/S架构中就是静态页面设计），后者侧重逻辑侧（与DB对接），如果一个系统能很好的做到前、后台分离，则可称作CMS（Content Management System）</p></blockquote><h1 id="网站开发"><a href="#网站开发" class="headerlink" title="网站开发"></a>网站开发</h1><p>对整个网站的开发过程如下：</p><p><img src="/2018/01/06/First-Website-Design/开发流程图.jpg" alt="流程图"></p><h2 id="前端页面设计"><a href="#前端页面设计" class="headerlink" title="前端页面设计"></a>前端页面设计</h2><p>本科时玩过计算机设计大赛（网站设计），所以对前端并不陌生，但不得不感慨开源前端框架的发展对这一块便利性的贡献，特别是那种对编码有高度强迫症的人（咳咳，不是我不是我）。开发中，我不需要再写大量的css来实现布局，为了一个动态效果也不用再去对js、jQuery研究太深入，因为开源者已经帮我们完成封装。<br><a href="http://www.bootcss.com/" target="_blank" rel="external">Bootstrap</a>是一套扁平化前端框架，栅格化的理念让其自动拥有友好的响应式功能，新手可以通过<a href="http://www.runoob.com/bootstrap/bootstrap-tutorial.html" target="_blank" rel="external">Boostrap3介绍</a>快速入门，有具体需求时候再参考官网的说明文档即可。<br>到这一步，前端开发仍不太友好，bootstrap虽减少了底层工作的实施，但缺乏艺术细菌的人，要搭建静态页面还是十分困难，因此我采用的办法就是down一个别人基于H5、bootstrap写好的开源静态网站（Demo可参考<a href="http://www.youzhan.org/" target="_blank" rel="external">Bootstrap优站精选</a>），在此基础上调整样式、修改细节（这一部分还是需要开发者对前端知识有部分了解）；同时，bootstrap官网也提供了大量被进一步封装的插件可供使用。</p><blockquote><p><strong>补充：</strong>网站中“团队新闻”、“科研成果”板块的表格布局及翻页功能是我自己用js实现的，花了些时间在逻辑设计上（如：处于第一页时，向前翻页的button应失效，但其他时候皆可点击等，这些后期结合Ajax与后台传输数据时逻辑会更复杂），是一个比较痛苦的过程，附上部分代码：</p><p><img src="/2018/01/06/First-Website-Design/table分页功能实现1.jpg" alt="自己实现table分页功能"></p><p>但在做网站后台页面设计时，偶然发现一个开源table框架，仅需在js中为table调用即可实现分页、查找等功能，那时叫一个郁闷！</p><p><img src="/2018/01/06/First-Website-Design/table分页功能实现2.jpg" alt="自己实现table分页功能"></p></blockquote><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>数据库设计分为<strong>概念设计</strong>、<strong>逻辑设计</strong>及<strong>物理设计</strong>，<strong>概念设计</strong>主要指E-R图（实体关系图），记得以前老师总说，读完信管专业出去不会画E-R图，等于白学，我大概就处于白学的边缘。具体的设计规则不难，想学习的同学借一本《管理信息系统》查阅即可，这里直接上图：</p><p><img src="/2018/01/06/First-Website-Design/E-R图.png" alt="实体联系图"></p><p><strong>逻辑设计</strong>上，因为我采用的是关系型数据库，工作即是将E-R图映射成有关联的二维表（关系表），这里不予叙述。</p><p><strong>物理设计</strong>即设计到操作层面了，本科时在接触DBMS（Database  Management System）时，用的是微软的Sql Server，不得不说它对小型网站开发不太友好，光软件就几个G，很多功能基本用不到，所以果断放弃。总听朋友说MySQL不错，轻量级（方便部署）且开源，就果断选择了。<br><a href="https://www.mysql.com/" target="_blank" rel="external">MySQL官网</a>，从这里可以下载，安装步骤也不复杂，具体操作可根据自己的系统，自行百度“MySQL安装教程”参考即可。安装成功后，数据库中关系表的构建这里就不累述了。<br>从这里开始，就需要对SQL语句有一定了解了，用户也可参考<a href="http://www.runoob.com/sql/sql-tutorial.html" target="_blank" rel="external">SQL介绍</a>学习，按需了解基本操作即可。</p><blockquote><p><strong>补充：</strong>MySql只是一种服务，安装成功仅表示你可以使用这项服务（数据的存储、操作——连接、增删查改等），使用时记得要先开启服务。<br>若每一张表都用SQL语句去操作显得十分繁琐了，通常的操作是表格的创建用可视化界面完成，后期增删查改操作涉及用户交互，所以用SQL操纵。在官网下载MySQL时，会自带一个可视化操作软件，个人认为及其难用，这里推荐Navicat，小清新的风格是我的菜。</p><p><img src="/2018/01/06/First-Website-Design/navicat.jpg" alt="Navicat"></p></blockquote><h2 id="后台开发"><a href="#后台开发" class="headerlink" title="后台开发"></a>后台开发</h2><p>后台开发中，我选的语言是PHP，当时做选择时候我权衡了好久，Emmmmmm…</p><blockquote><p><strong>补充：</strong><br><strong>C#：</strong>本科时我用C#较多，C#虽具有高便利性（是真的方便！本机上的服务器环境自动部署好，且很多表单控件被封装的较完善），但也正因此，他的弊端是低灵活性。如：表单控件的样式可能与自设计样式发生冲突、Ajax控件真心难用（自己写的话则不如用其他语言）、出bug时调试过程更繁琐等。当然，最主要的原因还是开发要下Visual Studio，随随便便又是几个G，abandon！<br><strong>JSP：</strong>java我比较熟悉（因为当时团队研究要求用java实现），但JSP没怎么接触，本科有一个室友的毕业设计是用JSP实现的，一想到当时他寂寞的抽一口烟再写几行代码的场景，我也放弃了。<br><strong>PHP：</strong>PHP+MySQL在当时算是比较好的结合了，虽然自己未曾接触过，但还是本着信念，想去尝试下，故花一天时间看完了菜鸟教程对PHP的<a href="http://www.runoob.com/php/php-tutorial.html" target="_blank" rel="external">介绍</a>，就直接上手实干了。<br><strong>其他：</strong>本是想着用Python，当时正好Python也是较热门的语言之一，但有人说Python对后台开发没PHP友好，毕竟在最初设计出来时主要面向的是数据分析需求，故没选。但实习部门有人用Python写后台体验还不错，所以后期若想尝试，Python也是一个不错的选择。另一个就是Nodejs，这是现在一位专写前端的同事推荐的，有兴趣的可以尝试下。</p></blockquote><p>很多人对后台语言存在恐惧心理（很多人就是本科时的我，哈哈），觉得专业课中的java、c等逻辑知识根本用不上，但其实理解了其原理后，才发现都是相通的。<br>这里给出我的理解：后台开发的处理逻辑与上课时的内容无异（顺序、选择、循环等），熟练的开发者也会设计良好的数据结构加速处理效率，需要补充的知识仅是其与前端界面、DB的数据传输工作。<br><strong>前端与后台的数据传输：</strong>主要形式分为两种，一种是同步传输（Synchronous Transmission），PHP中这种形式较简单，缺点是每次提交任务都要全局刷新界面，开销大且不友好，做法是将写好的html文件后缀改为php，即可在代码中添加php脚本“&lt;?php code ?&gt;”，此时php可根据form-name或者id来接收信息并做处理。另一种是异步传输（Asynchronous Transmission），用到的技术是Ajax，可实现界面局部刷新，关于Ajax的学习可以参考<a href="http://www.runoob.com/ajax/ajax-asp-php.html" target="_blank" rel="external">这里</a>，此时页面数据通过js传输给后台处理文件，再接收处理完成的结果，做到了展示与处理完全分离，这里展示一段实现时涉及的代码。</p><p><img src="/2018/01/06/First-Website-Design/php-html.jpg" alt="Php-html"></p><p><img src="/2018/01/06/First-Website-Design/ajax-jquery.jpg" alt="Ajax-jquery"></p><blockquote><p><strong>补充：</strong>Ajax是一门强大且方便使用的技术，jQuery作为js的封装，也对ajax的调用做了完善，主要使用的函数是.post()与.get()，ajax函数的返回格式一般采用json，学过python的童鞋可以将其理解为字典；对json中的数据用html标签及css进行封装，即可达到很棒的交互，网站中“团队新闻”、“科研成果”板块即采用这项技术，页面的后缀仍是html，供大家参考。这里铺上一张对ajax返回的json数据进行解析，形成网页的代码，图中data为ajax传回的json数据。</p><p><img src="/2018/01/06/First-Website-Design/ajax-json-html.jpg" alt="Ajax-json-html"></p><p><strong>补充：</strong>说到后台开发，不得不提的一个问题就是开发环境配置。这里先花一点时间理解下我们平时上网的内流程，当我们使用设备（电脑 or 手机等，简称A）浏览一个网站时，涉及到的请求都要发送给服务器（可理解为远端的电脑，简称B），服务器根据请求进行操作，再将数据返回，A的浏览器则解析返回的数据（这里的数据指被解析后的html标签、css等），从而进行展示。<br>当我处于开发阶段时，还未租用服务器，所以要做的工作就是让我的笔记本既成为A，又成为B。通常情况下，作为A的环境很容易，浏览器都有封装好，所以我们在写静态界面时候，可直接用浏览器运行并展示；后者则需要下载软件部署，正常的操作是百度搜索“Apache+MySQL+PHP开发环境部署”，但因过程十分繁琐，一直认为“学习死于配置”的我果断找到了更方便的方式，那就是<a href="http://www.wampserver.com/" target="_blank" rel="external">WAMPSERVER</a>，一键部署好本机环境。就这样，我在本机上能很方便的进行调试。</p></blockquote><p><strong>后台与数据库的数据传输：</strong>搭建网站时，使用的DBMS是MySQL，所以这一块我使用的是“mysqli”，具体的学习可点击<a href="http://www.runoob.com/php/php-mysql-intro.html" target="_blank" rel="external">这里</a>，它PHP中已封装好的对象，直接调用即可，传入的对象是SQL语句，mysqli将SQL传入DB执行，并返回执行结果。继续附图：</p><p><img src="/2018/01/06/First-Website-Design/mysqli1.jpg" alt="Mysqli1"></p><p><img src="/2018/01/06/First-Website-Design/mysqli2.jpg" alt="Mysqli1"></p><h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><p>网站开发工作结束后，面临的工作就是部署在服务器端，简单的理解就是把写完的所有代码copy到一台可供左右人访问的电脑上，正所谓好东西要学会共享。但困难的理解就包括：<strong>服务器租赁</strong>、<strong>服务器环境部署</strong>、<strong>域名申请</strong>、<strong>域名解析</strong>…停，我们一一来理解。</p><p><img src="/2018/01/06/First-Website-Design/hold-on-example.jpg" alt="举个栗子"></p><p>举个简单的栗子，当我们访问百度时，通常操作是在浏览器中输入域名“www.baidu.com”，实质中，万维网会根据这个域名解析成一个IP地址“XXX.XXX.XXX.XXX”，这个IP地址又和远端的一台计算机唯一匹配，所以我们的访问请求最终是传送到远端计算机中，该计算机根据请求返回请求结果，浏览器解析后展示给成网页。</p><p>我要做的事情与这个过程一样，第一步就是<strong>租赁服务器</strong>（买不起我还租不起吗？），网站部署中对服务器性能主要看重的是硬盘容量与带宽（流量），CPU、GPU、内存等主要是针对高计算量服务，不用太高配置；考虑到网站的访问需求不会太高，故选择了阿里云的最低配服务器（系统是Windows Server 2008），当时一年的价格大概是1100左右，随着云计算的发展，现在可能有一定涨幅。当时主要是对Linux不熟悉，所以系统选择了Windows，但这里建议还是选Linux更好，因为才Windows上装软件、配环境会繁琐的多。</p><p>前面提到，服务器与一个IP地址绑定，此时我们可以通过IP地址来访问这一台电脑（建议使用Windows下自带软件“远程桌面连接”来连接远程Windows服务，较友好），接下来要做的事情就是让访问请求送到我们所写的代码中进行处理，从而可以返回超文本标记语言（网页代码）——<strong>服务器环境部署</strong>。</p><p><img src="/2018/01/06/First-Website-Design/connection.jpg" alt="远程桌面连接"></p><p>这一块的配置确实很麻烦，所以一开始我想到一个捷径，服务器和我自己的电脑都是Windows系统，那直接在上面也装一个WAMPSERVER不就都搞定了吗？但结果不如人意，安装成功后，一旦开启WAMPSERVER，整个服务器就会卡死（至今仍存有疑惑，配置太低？ or WAMPSERVER本身不支持服务器系统），故放弃。之后只有尝试一步步安装Apache、MySQL及PHP，后两者较成功，但Apache的安装总显示失败，于是我的配置组合变成了IIS+PHP+MySQL，虽然组合较奇怪，但仍算是完成了配置工作（后来查询的资料是Apache+PHP+MySQL环境在Linux下会友好的多）。之后的工作就是将代码拷贝到服务器上，并配置端口到8080即可（通过IP地址访问时，默认的端口号）。</p><blockquote><p><strong>补充：</strong>配置环境中的很多细节被我省略了，需要提醒的是在Windows下环境变量的设置，软件（Apache、PHP、MySQL等）中一般自身包含一个配置文件.inf，里面的内容也需要修改的也很多，具体的细节还是碰到了直接度娘，这里仅作提醒。</p><p><strong>补充：</strong>如果购买的服务器系统是Windows时，IIS是需要提前配置的，方便期间，可以在阿里云中搜索Windows Server一键配置包，下载后next到底即可，省去了自己为计算机开启服务的繁琐操作，阿里云的服务化在国内的云供应商中做的还不错。</p><p><img src="/2018/01/06/First-Website-Design/aliyun-config.jpg" alt="阿里云"></p></blockquote><p>完成了前两步，就剩下最后的<strong>域名申请</strong>与<strong>域名解析</strong>了，这一块可直接从阿里云控制台中跳转，域名的申请存在较长的审核周期，建议可提前落实该步骤，因操作官网都有详细说明，这里就不重复提了。</p><blockquote><p><strong>补充：</strong>提一个有意思的现象，这个设想产生的原因是有另一个老师看我做的网站还不错，也提了需求。我的第一反应就是，能否公用一个服务器，申请不同的域名，每个域名对应该服务器的不同端口即可。本着这种设想，我的尝试最终还是失败了，原因是域名在解析时不能解析到带端口的IP地址（这样解释也合乎情理，毕竟可行的话，那云提供商的利润不得大大缩水），之后也一直没想这个事。直到有一次和同事聊到这个需求，他给了一个很赞的建议，即访问时，使用的域名应该也会作为信息传送到服务器，那么可让index页面（被访问时的第一个页面）中写一个判断语句即可，若为XX域名，则跳转至XX界面，可达到同一服务器部署多网站的目的，有才！</p></blockquote><h2 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h2><p>测试是系统开发中较为重要的一步，由于我对文档的整理要求较高，因此测试工作返回的内容结构化较好，且能快速定位，我也方便修改，具体的细节这里就不叙述了，只是强调下文档工作的重要性。</p><h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>安全方面，我在网站开发中主要做了两方面工作：一是防SQL恶意注入，用到函数htmlspecialchars()，使用者在表单中输入的SQL会被解析中html的特殊字符，具体的细节可以参考网上的资料。另一个工作则是对session的控制，后台界面中，我令session具有一定的存活周期，长时间不操作后再登陆时会提示需重新输入用户名及密码；同时，还阻止异常登陆情况的发生（即跳过用户名、密码输入界面访问），上图！</p><p><img src="/2018/01/06/First-Website-Design/session.jpg" alt="Session"></p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>视频的展示，我直接使用H5的video标签，使用起来十分方便，需要注意的是记得在服务器IIS中配置好MIME，具体的介绍可参考<a href="http://blog.163.com/junhe999@126/blog/static/19318021201261743647379/" target="_blank" rel="external">常用MIME类型</a></p><h3 id="统计访问量"><a href="#统计访问量" class="headerlink" title="统计访问量"></a>统计访问量</h3><p>网站中做了一个访问量统计功能，将主页拉到最下面可看到。不过这里只算半个实现，浏览时刷新界面也会使得访问量加1（就不提网站刚上线时，我默默在主页上按F5不动的经历了），实际中实现时还是应该用脚本判断两次浏览是否来自同一IP地址，并给出逻辑：一定时间内同一IP地址的多次访问只记一次访问量，实现起来应该不难，留给大家去实现，这里贴上半个实现的代码：</p><p><img src="/2018/01/06/First-Website-Design/count.jpg" alt="Count"></p><h3 id="Logo"><a href="#Logo" class="headerlink" title="Logo"></a>Logo</h3><p>Logo间接反映了一个团队的逼格，起初这一块计划请一位艺术与设计学院的童鞋帮忙，后来对方比较忙，我就只有自己操刀了（这里使用的是在线Logo设计软件，网上资源较多，提供的素材也够用，列举<a href="https://www.logoaa.com/" target="_blank" rel="external">一个</a>；若追求更高逼格的，就需要上PS了），最后的成果我自己还是比较满意的，上图！</p><p><img src="/2018/01/06/First-Website-Design/teamLogoBlackC.png" alt="Logo"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个项目进展之初觉得不会太困难，但开发过程中对各种新知识的懵圈却很磨人，身边几乎找不到交流的同学，任何知识都靠自学。但不得不说，这个过程锻炼了我的毅力，让我面对陌生的实物不再那么恐惧，还是那句话：“逢山开路，遇水搭桥~”<br>等到网站做完，看着自己整理的总结文件夹，成就感小爆炸，那么又到了直接上图的时候了！</p><p><img src="/2018/01/06/First-Website-Design/doc-demand.jpg" alt="Doc-demand"></p><p><img src="/2018/01/06/First-Website-Design/doc-code.jpg" alt="Doc-code"></p><blockquote><p><strong>补充：</strong>网站构建的代码放到了我的github中，在开发php时使用的编译器是PhpStorm（编译器类型众多，按喜欢的风格选就好）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我第一次一个人单独设计并开发一个网站，需求来源大致是研究生团队的老师们希望能拥有一个团队展示平台，用以对外宣传。而调研中发现外包的费用较高，就在群里询问是否有学生感兴趣，刚好那段时间所写论文的实验结果一直难以有提升，并想到本科时用C#独立开发过一个信息系统，就揽下了这活儿，赚点外快，却没想到前前后后还是很多坑，但最后还是坚持的落实了需求。虽然我自己后来的发展方向也不与信息系统相关，但这份经历算是我17年的成果之一，故借此机会，对其好好做个总结。对于一个之前从未接触PHP、MySQL的我来说，心中的信念就是“逢山开路，遇水搭桥！”亦或是“知知为知知，不知百度知，百度不知谷歌知！”这份总结我也会分享很多技术干活，相信阅读完后对搭建系统就不再那么神秘了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Website Design" scheme="http://yoursite.com/tags/Website-Design/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Bootstrap" scheme="http://yoursite.com/tags/Bootstrap/"/>
    
      <category term="Servers Configuration" scheme="http://yoursite.com/tags/Servers-Configuration/"/>
    
      <category term="CMS" scheme="http://yoursite.com/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>神经网络学习历程推荐</title>
    <link href="http://yoursite.com/2017/11/05/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/11/05/神经网络学习记录与总结/</id>
    <published>2017-11-05T02:52:03.000Z</published>
    <updated>2018-02-20T03:47:59.058Z</updated>
    
    <content type="html"><![CDATA[<p>实习部门的研讨会一直在推动Deep Learning的学习，但最近的几次交流学习方向有点被带偏了，故对于这一块的学习我只能按照自己的计划来走了。看资料的过程中，发现内容良莠不齐，故希望借此文章记录自我的学习过程，一方面将精辟的学习资料进行保存，另一方面督促自己对于这一块的进一步学习。</p><a id="more"></a><h1 id="1-BLOG"><a href="#1-BLOG" class="headerlink" title="1.BLOG"></a>1.BLOG</h1><h2 id="1-1零基础入门深度学习"><a href="#1-1零基础入门深度学习" class="headerlink" title="1.1零基础入门深度学习"></a>1.1零基础入门深度学习</h2><p>此系列是好朋友推荐的，简短的介绍了机器学习的一些基础，之后马上开展重点关注的CNN、RNN等，文章从实例到理论再到Coding，以开发人员的角度介绍知识（这里承认本人数学功底一般，直接上公式立马晕）。</p><h3 id="已看完"><a href="#已看完" class="headerlink" title="已看完"></a>已看完</h3><p><a href="https://www.zybuluo.com/hanbingtao/note/433855" target="_blank" rel="external">零基础入门深度学习(1) - 感知器</a><br><a href="https://www.zybuluo.com/hanbingtao/note/448086" target="_blank" rel="external">零基础入门深度学习(2) - 线性单元和梯度下降</a><br><a href="https://www.zybuluo.com/hanbingtao/note/476663" target="_blank" rel="external">零基础入门深度学习(3) - 神经网络和反向传播算法</a><br><a href="https://www.zybuluo.com/hanbingtao/note/485480" target="_blank" rel="external">零基础入门深度学习(4) - 卷积神经网络</a><br><a href="https://zybuluo.com/hanbingtao/note/541458" target="_blank" rel="external">零基础入门深度学习(5) - 循环神经网络</a></p><blockquote><p>证明过程看着有点懵，这种从特殊推到一般的形式简直是我的救星（虽然最后还是passing this section）<br>“深度循环网络”计算方式个人认为有点问题，从给定的图片可以看出，layer_index&gt;1的循环层每个神经元应该受三个节点的影响，但是公式的意思仅表示其受两个节点影响，可能是书写错误</p><p><img src="/2017/11/05/神经网络学习记录与总结/revise_1.jpg" alt="section-5_revise_1"></p></blockquote><p><a href="https://zybuluo.com/hanbingtao/note/581764" target="_blank" rel="external">零基础入门深度学习(6) - 长短时记忆网络(LSTM)</a></p><blockquote><p>LSTM被发明出来的原因是因传统的RNN容易发生梯度消失 or 梯度爆炸，因为对参数的训练是沿着梯度的反方向，梯度消失即梯度趋于0，每次训练时，参数基本不发生改变，造成当前时刻输出基本不受长时间间隔的输出影响（几乎无依赖关系），这是不希望看到的；梯度爆炸的解释刚好相反，参数训练时，与当前间隔越长的N，其参数改变值会指数增长，也会阻碍训练过程</p></blockquote><h3 id="未看完"><a href="#未看完" class="headerlink" title="未看完"></a>未看完</h3><p><a href="https://zybuluo.com/hanbingtao/note/626300" target="_blank" rel="external">零基础入门深度学习(7) - 递归神经网络</a></p><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h1><p>我对这一块尝试上手的方式就是实现别人的代码，对于不懂的函数再查询官网的文档，按需理解。刚好一个朋友对CNN这一块较熟悉，很多不懂的问题都有请教他，我阅读的代码就是它写的用CNN实现MNIST数据集手写书字体识别。<br>MNIST数据集是开源的，每一条数据都是一个手写的数字图像（0-9），大小是28*28的黑白像素（平铺后即为576个binary值）。因此这个问题本质上是一个多分类问题，希望训练一个模型，能精确的判断输入的手写数字到底是多少。<br>诺亚方舟实验室的服务器还是很赞的，很多环境早已配置好，因此我很开心的跳过了“学习死于安装”这一过程，下面的内容主要记录实现中自己的一些发现。</p><h2 id="2-1参考材料"><a href="#2-1参考材料" class="headerlink" title="2.1参考材料"></a>2.1参考材料</h2><p><a href="https://xijunlee.github.io/2017/06/23/CNN%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E4%BD%93%E8%AF%86%E5%88%AB/" target="_blank" rel="external">卷积神经网络实践之MNIST手写数字体识别——Xijun LI</a></p><p><a href="http://keras-cn.readthedocs.io/en/latest/" target="_blank" rel="external">Keras文档</a></p><h2 id="2-2实现记录"><a href="#2-2实现记录" class="headerlink" title="2.2实现记录"></a>2.2实现记录</h2><p><strong>input_shape</strong><br>Keras中仅第一层需要加这个属性，后面的层会自动计算。需要注意的是属性值的格式，因keras是对Tensorflow及Theano的再封装，但因Tensorflow与Theano的语法存在差异，所以keras封装后不能做到语法完全通用。<br>我在实现时开始总提示error，后来定位原因是因两次实现的服务器中，keras后台依赖有差异（一个是Tensorflow，另一个是Theano），两者对输入数据的格式存在差异（一个希望label在前，一个希望在最后），做如下修改即可：</p><p><img src="/2017/11/05/神经网络学习记录与总结/mnist_1.jpg" alt="Mnist_code"></p><p><strong>画图</strong><br>下载的数据都是binary值，不够直观，所以我接触数据的第一件事就是把它画出来，画灰度图的方式还是很简单，这里仅提供记录即可。<br>用numpy把数据reshape成28*28的格式，再调用pyplot中的imshow()即可，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">train_df = pd.read_csv(<span class="string">'dara/train.csv'</span>)</div><div class="line">train = train_df.values <span class="comment"># Numpy representation of NDFrame</span></div><div class="line"></div><div class="line">img_rows, img_cols = <span class="number">28</span>, <span class="number">28</span></div><div class="line">trainX = train[:, <span class="number">1</span>:].reshape(train.shape[<span class="number">0</span>], img_rows, img_cols)</div><div class="line"></div><div class="line">plt.imshow(trainX[img_id], cmap = plt.cm.gray) <span class="comment"># 灰度图</span></div><div class="line">plt.show()</div></pre></td></tr></table></figure><h1 id="3-公开课"><a href="#3-公开课" class="headerlink" title="3.公开课"></a>3.公开课</h1><p>前两章的内容将我领进了Deep Learning这个神秘世界，我学东西的特点是先消除神秘感，再系统性的学习内容，一方面提高学习效率，另一方面也能消除我看教材时有种打开英语课本第一页的心情。</p><p>对比了一些公开课与教程，我最终选择了Stanford的<a href="http://cs231n.github.io/" target="_blank" rel="external">Convolutional Neural Network for Visual Recognition</a>，课程的前半部分也对Machine Learning的一些基础知识做了回顾，让我对之前的一些黑盒式理解也更加清晰。</p><blockquote><p>学习方式：介于视频是全英文授课，所以我是先看完GitHub上的课件，再看公开课进行补充。福利是原课程的视频被人copy到B站上了<a href="https://www.bilibili.com/video/av13260183/" target="_blank" rel="external">（无字幕版）</a>，有雷锋同志也翻译出了字幕版<a href="https://www.bilibili.com/video/av17204303" target="_blank" rel="external">（有字幕版）</a>。</p></blockquote><h2 id="3-1-学习笔记1——正则化"><a href="#3-1-学习笔记1——正则化" class="headerlink" title="3.1 学习笔记1——正则化"></a>3.1 学习笔记1——正则化</h2><p>官方解释：在Loss Function中加入正则化惩罚项的作用是降低model的复杂程度，增强其泛化能力（在测试集[未知环境]的表现能力）。记得第一次接触这个概念时，是看的Coursera上的一门《Machine Learning的课》，当时用于解释的图与吴恩达老师公开课上使用的类似，如下：</p><blockquote><p><img src="/2017/11/05/神经网络学习记录与总结/regularization explanation.jpg" alt="Regularization Explanation"></p></blockquote><p>解释中，在损失函数中加入正则化项后，能让最终模型从model3（图3）转为model2（图2），也正是因为说明，我的理解就一直存在误区，认为正则化惩罚项的目的是降低模型中高维度项的参数值，低复杂度等价于用低维度项来进行拟合。</p><p>看了公开课中关于正则化的解释后（<a href="http://cs231n.github.io/linear-classify/#loss" target="_blank" rel="external">直达链接</a>），特别是L1 Regularization与L2 Regularization的对比，发现与之前的理解存在矛盾。L1的目的是希望特征影响稀疏化，L2的目的是希望特征影响平均化，这两者加入目标函数中都不能使得model训练向低维度特征的稀疏化发展（L1可能导致高维度特征被保留、L2排斥这种稀疏化结果）。</p><p>经过自我探索，对这一块的认知有了新的理解，总结如下：模型的简单化是指参数的大小综合下降，而不是从维度上用更低次的项去拟合（L1与L2等Regularization方式都能达到该目的）；实际中，有些场景希望能用较少的特征来解释实际现象（倾向于用L1）,有些场景则希望尽量用上所有的特征（倾向于用L2），此时就需要根据经验来选取。</p><font color="red">补充：降维以消除过拟合是从特征个数的角度出发（在考虑加入哪些特征时考虑的事情），而不是针对幂级数高低</font><blockquote><p>PS：参数值的综合减小会使得模型更加简单（Linear Model中表现为曲线更加平缓），而不是高次项的参数比重减小。下图中，使用线性分类器做分类，在损失函数中加入L2正则化项，得到蓝线（y=49.7x + 0.159x^2 + 0.002x^3，较低的正则化超参）与红线（y=2.581x + 0.157x^2 + 0.008x^3，较高的正则化超参），发现参数综合值较低的曲线（红线）更加平缓，但高次项不一定更低。</p><p><img src="/2017/11/05/神经网络学习记录与总结/example-regularization.jpg" alt="Example Regularization"></p></blockquote><p>给出一个对过拟合/欠拟合、方差/偏差解释较全面的博客（<a href="http://blog.csdn.net/hurry0808/article/details/78148756" target="_blank" rel="external">直达链接</a>），里面的解释中最让我受益的是随着model complexity的增加，在测试集上的表现为：variance逐渐增加，bias先减小后增加。起初，模型类似于随机预测（under-fitting），故在训练集、测试集上的预测都不会太好，因此bias大，但预测很稳定（所有的预测值差距不大），故variance都小；随着模型复杂程度的增加，模型挖掘数据内在分布的能力逐渐提高，因此在训练集与测试集上的bias都变小，但预测的点的差异化也逐渐表露，故variance增加；当模型复杂程度进一步增加时（over-fitting），模型较依赖于训练数据，训练集毕竟只是真实情况的一个采样（与真实情况存在一定差异），故在训练集上的bias虽然继续减小，但在测试集上的bias却增加了，此时variance因预测点的差异化的提高而继续增加。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习部门的研讨会一直在推动Deep Learning的学习，但最近的几次交流学习方向有点被带偏了，故对于这一块的学习我只能按照自己的计划来走了。看资料的过程中，发现内容良莠不齐，故希望借此文章记录自我的学习过程，一方面将精辟的学习资料进行保存，另一方面督促自己对于这一块的进一步学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
      <category term="Neural Network" scheme="http://yoursite.com/tags/Neural-Network/"/>
    
  </entry>
  
  <entry>
    <title>Introduction_MCTS（未写完）</title>
    <link href="http://yoursite.com/2017/11/01/Introduction-MCTS/"/>
    <id>http://yoursite.com/2017/11/01/Introduction-MCTS/</id>
    <published>2017-11-01T14:43:04.000Z</published>
    <updated>2017-11-13T01:46:15.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>最近在做一个Monte Carlo Tree Search的调研，这几年强化学习的热潮使得该算法大放光彩，我们在Alpha Go与Alpha Zero中也见识了它的强大。这篇总结本着存在必有其原因的思想，刨了下树搜索的发展历史，从发展中探讨MCTS的优点，也算是对自己这段时间调研的一个记录。</p><a id="more"></a><h1 id="Tree-Search"><a href="#Tree-Search" class="headerlink" title="Tree Search"></a>Tree Search</h1><p>树搜索模型在MIP、GO、Constructive Algorithm、Search Engine等领域有广泛的应用，这里我把TS总结为如下过程：<br><img src="/2017/11/01/Introduction-MCTS/tree_search_image.jpg" alt="tree-search-introduction-image"></p><blockquote><p><strong>Tree Search</strong><br>存在一个Search Queue（SQ）储存待探索的节点，根据一定策略，每次选取一个节点进行探索，探索过程中会产生一些新的节点，更新SQ（将产生的新节点插入到SQ中），如此反复，直到满足终止条件<br>反复操作的结果是搜索树被不断完善，好的Select Strategy能加速搜索到optima的速度，结合剪枝策略（缩小搜索空间），进一步提高搜索效率<br>剪枝（prune）：当前节点的评估值差于整棵树已搜索到的最优值时，则放弃当前节点的后续探索步骤，将当前节点及其后续分支从树中剪掉，称为剪枝（PS：小明到酱油店间新修了一条路，他决定尝试是否能更快的到达目的地，历史上他走旧路需花30mins，如今他新路还未走完，所花时间已超过30mins，则可断定新路一定劣于旧路，即可放弃后续探索过程）</p><p><img src="/2017/11/01/Introduction-MCTS/ts_prune_example.jpg" alt="tree-search-prune"></p></blockquote><h2 id="Uninformed-Search"><a href="#Uninformed-Search" class="headerlink" title="Uninformed Search"></a>Uninformed Search</h2><p>Uniformed Search不从环境中获取信息，属于较笨的搜索方式，树搜索中常见的类别有BFS(广度优先搜索)、DFS（深度优先搜索），这里用两张图简要回忆一下这两种搜索方式（序号表示搜索顺序）：<br><img src="/2017/11/01/Introduction-MCTS/bfs_dfs.jpg" alt="Bfs-and-Dfs"></p><h2 id="Informed-Search"><a href="#Informed-Search" class="headerlink" title="Informed Search"></a>Informed Search</h2><p>利用环境信息，辅助树搜索过程，提高搜索效率。这里我以A star算法举例说明：A star算法也是一种树搜索模型，常用于图论中最短路径问题；介绍时，我依以该经典问题作为背景方便理解，实际拓展中，自定义评估函数g(n)、h(n)（下文会介绍）即可用于其他场景。</p><blockquote><p><strong>A star</strong><br>每个节点i保存两个信息：①g(i)记录start node到i的实际最短距离（已发生） ②h(i)记录i到end node的评估距离（未发生）<br>在Search Queue（SQ）中选取探索节点的策略为min{f(n)}，其中f(n)=g(n)+h(n)；由定义可知，f(n)用于衡量当前节点的总体评估距离，即利用了已发生的信息，同时利用了未知的预测信息<br>优点：算法灵活性高①当h(n)小于actual distance(n,end node)时，搜索的点较多，搜索范围较大，找到global optima的概率增大，但搜索效率较低（A star的prune也是以f(n)作为评估，h(n)较小时，节点被剪枝的可能性降低）；反之当h(n)大于actual distance(n,end node)时，搜索效率虽然提高，但更多时候搜索到的仅仅是local optima ②经典的A star算法中h(n)是静态的，实际中可将之设计为动态，随着搜索过程的进行，环境信息的增加，更新h(n)，提高后续搜索效率<br>缺点：①算法对h(n)的设计具有较强依赖性，h(n)与实际值越接近，算法搜索到global optimal的总体效率越大 ②不能保证一定搜索到global optimal</p></blockquote><h1 id="Monte-Carlo-Tree-Search"><a href="#Monte-Carlo-Tree-Search" class="headerlink" title="Monte Carlo Tree Search"></a>Monte Carlo Tree Search</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;最近在做一个Monte Carlo Tree Search的调研，这几年强化学习的热潮使得该算法大放光彩，我们在Alpha Go与Alpha Zero中也见识了它的强大。这篇总结本着存在必有其原因的思想，刨了下树搜索的发展历史，从发展中探讨MCTS的优点，也算是对自己这段时间调研的一个记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tree Search" scheme="http://yoursite.com/tags/Tree-Search/"/>
    
      <category term="A*" scheme="http://yoursite.com/tags/A/"/>
    
      <category term="MCTS" scheme="http://yoursite.com/tags/MCTS/"/>
    
  </entry>
  
  <entry>
    <title>Introduction To Operation Research</title>
    <link href="http://yoursite.com/2017/10/28/Introduction-To-Operation-Research/"/>
    <id>http://yoursite.com/2017/10/28/Introduction-To-Operation-Research/</id>
    <published>2017-10-28T02:30:17.000Z</published>
    <updated>2017-12-01T08:02:20.704Z</updated>
    
    <content type="html"><![CDATA[<p>实习部门做的问题主要是供应链方向的优化，包括库存控制、排产调度、装箱装柜、物流优化等等，对于建立好的数学模型，现阶段使用的Solver是GUROBI，小组成员对于其中求解的原理较感兴趣（不至于完全将其当成黑箱使用），介于我是小组中唯一的OR方向（大部分是CS、统计方向），leader希望我对这一块做个详细的调研，并与某天做一次presentation。<br>为了形成体系化的讲解，对单纯形部分的理论知识进行了补充，结合16年暑假跟随华南理工的一位教授学习的MIP solver知识，用一些图将自己的理解形象的表示出来。最后展示效果不错，因此也在这里进行记录与分享。<br>展示内容包含一些我自身对知识的理解，如有错误，请随时提出。<br>内容知识涉及的参考文献、资料，都可以在我的github中documents项目中查询到。</p><a id="more"></a><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><blockquote><h2 id="1-目录"><a href="#1-目录" class="headerlink" title="1.目录"></a>1.目录</h2><blockquote><p>介绍的内容包括六方面：1.线性规划；2.单纯形法；3.Column Generation；4.Bender Decomposition；5.MIP Solver Core；6.GUROBI</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/content.jpg" alt="content"></p></blockquote><h2 id="2-线性规划"><a href="#2-线性规划" class="headerlink" title="2.线性规划"></a>2.线性规划</h2><blockquote><p>线性规划是凸优化的一种，先来看看凸集与凸优化的定义。</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt1-3.jpg" alt="part1-3"></p><blockquote><p><strong>凸集</strong>：集合中任意两点连线上的点仍属于该集合，否则为非凸；线性规划的解空间因为是由一个个超平面切分空间得来，故解空间是一个规则的多面体（边缘线性的凸集）。<br><strong>凸优化</strong>：解空间为凸集，且目标函数为线性的优化。<br>凸优化有两条很重要的性质，为单纯形的实现做了铺垫：a.从任意点出发，我们可以在有限步内移动到局部最优点；b.局部最优点即是全局最优点。</p></blockquote><p>再补充一些运筹学中的基本定义：a.所有的问题都可以转化为标准式；b.系数矩阵A(m*n)满秩，则任意线性无关的m列向量成为基B，对应的变量为基变量Xb，余下的列(n\m)构成非基N，对应的变量为非基变量Xn；c.满足所有约束条件的解为可行解，至少违背一条约束的解为非可行解。更多详细的定义可借一本运筹学中文教材参考。</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt1-1.jpg" alt="part1-1"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt1-2.jpg" alt="part1-2"></p></blockquote><h2 id="3-Simplex-Method"><a href="#3-Simplex-Method" class="headerlink" title="3.Simplex Method"></a>3.Simplex Method</h2><blockquote><p>凸优化的性质给单纯性法提供了理论基础，这里给一个通俗的解释：线性规划问题的解空间是规则多面体，单纯形法沿着多面体的边移动，每次移动都向着使得目标更优的方向，则有限步内一定可到达局部最优点（全局最优点）。下面的几张slides是关于单纯形法的具体实现与理论证明：</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-1.jpg" alt="part2-1"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-2.jpg" alt="part2-2"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-3.jpg" alt="part2-3"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-4.jpg" alt="part2-4"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-5.jpg" alt="part2-5"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt2-6.jpg" alt="part2-6"></p><p>这一部分内容主要参考教材《Introduction to linear programming》2-3章，这里阐述一些通俗的解释：<br>（1）单纯形法沿着多面体的边移动进行优化，每一条边都表示针对当前点的可移动方向。<br>（2）在移动时要保证使得目标更优，但移动过程中，不能违背任一约束条件（保证解依旧在可行域之中），解在沿着多面体的边移动时，当前基变量中的一部分会随着移动而不断减小，当存在一个基变量减小为0时，必须停止移动（继续移动会违背变量大于等于0的约束），此时到达多面体的一个新节点，新加入的变量值大于0，原先的一个变量（不考虑退化情况）值减小为0，这就是单纯形法的换基过程（可参考slide-3中的实例）。<br>（3）通过slide中的推导会发现，我们在线性规划中总是提到的reduced cost就是目标值增量，因此在最小化问题中，希望沿着增量小于0的方向移动；一旦发现某一顶点可移动边的所有增量（reduced cost）都不小于0，则求得最有解，这就是对单纯形法中optimality condition的解释。<br>（4）slide-5对单纯形算法的流程做了描述（based on minimal problem），step1是为算法确定初始解，这一步其实很影响算法效率（在保证搜索开始的点，初始解为基可行解的同时，若其已离optimal很近，效率不高才怪）；step2计算reduced cost，选择reduced cost小于0的方向移动，存在多个rd小于0的方向时，选择策略灵活（reduced cost最小表示沿着该方向移动单位步长，会使得目标降低的更快，故有些教材会建议选取rd最小的方向移动的策略，但reduced cost越小，不代表可移动步长也大，所以才说策略灵活）；step4则是计算沿着优化方向的最大可移动步长，判别依据是移动中所有变量不能小于0。</p></blockquote><h2 id="4-大规模LP求解"><a href="#4-大规模LP求解" class="headerlink" title="4.大规模LP求解"></a>4.大规模LP求解</h2><blockquote><p>在问题规模上升到移动一定程度后，很多算法的求解效率大幅度降低，此时就会有一大批学者涌入，研究算法如何适配大规模问题，这之中一个很重要的思想就是分解。我们再次考虑LP的模型，明显可知问题规模的增大主要来之两方面：a.变量数目增加；b.约束个数增加，列生成（Column Generation）与切平面（Cutting Plane or Bender Decomposition）就是为解决他们而发明出的。<br>这两个算法单独说理论都要讲好久，故讲解时不谈公式（了解理论前，对单纯形法的推导了解必不可少！），依旧是希望通过通俗的语言来了解它们。抛砖引玉，先给出一张自我总结图：</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt4-3.jpg" alt="part4-3"></p><h3 id="Column-Generation"><a href="#Column-Generation" class="headerlink" title="Column Generation"></a>Column Generation</h3><p>变量较多时单纯形算法的求解效率明显降低，但存在一些问题就是这么BT，如slide中的cut stock problem，当数学模型建成set cover model时，变量的个数为指数级别。考虑到这类问题约束较少，即约束中行个数m远小于列数n，故求解中，可真对原问题（Master Problem）只取很少一部分变量n1（m &lt; n1 &lt;&lt; n）做单纯形求解（Solve Restricted MP），但在检验optimality condition时，回到原问题，考虑所有n个变量。<br>以最小化问题为例，判断解是否最优的条件为检测所有n个变量的reduced cost是否都不小于0，故此时可构建搜索最小化reduced cost的优化问题（sub-problem），根据rd的计算公式形式可知，sub-problem是一个1D-Knapsack Problem，求解效率较高。当sub-problem的最优值 &gt;= 0，则说明n个变量中reduced cost的最小值都比0大，此时原问题依据单纯形法的最优判断条件，达到最优；若sub-problem的最优值 &lt; 0，说明存在需要继续进基的非基变量，问题求解过程继续。</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt3-1.jpg" alt="part3-1"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt3-2.jpg" alt="part3-2"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt3-3.jpg" alt="part3-3"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt3-4.jpg" alt="part3-4"></p><p><strong>CG拓展：</strong><br>（1）求解RMP时，可将其转换为对偶问题（虽然RMP相对于MP来说变量数少了很多，但依旧很多，而有证明指出单纯形法求解多约束少变量问题的效率大于多变量少约束问题），对偶问题的解称为单纯形乘子，作为求解sub-prolem目标中的价值系数。<br>（2）MP的变量被分为考虑集N1，非考虑集N2（N2=N\N1），对于检测出来的N2中reduced cost小于0的变量，需进基，但也可设计一定策略，检测N1中不会再进基的非基变量，将其挪到非考虑集N2中，以此预防N1不断增大，求解RMP效率降低的情况发生。<br>（3）每次求解子问题时，可让solver给出几个可行解，对应于一次挪动（从N2到N1）的变量个数大于1，加速收敛过程。<br>（4）……</p><h3 id="Bender-Decomposition"><a href="#Bender-Decomposition" class="headerlink" title="Bender Decomposition"></a>Bender Decomposition</h3><p>约束较多的问题，常见的组合优化问题TSP就是一个。考虑slide中TSP的数学模型，需存在破子环的约束，该类约束的数量级为指数级，证明如下：</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt4-10.jpg" alt="part4-11"></p><p>故此时可考虑一开始仅纳入一部分约束进行求解（Solve Restricted MP），在检查解的合法性时则带入所有的约束中检查，将候补集中违背的约束加入RMP，如此反复，直到RMP的最优解满足所有约束，则此时sol* of MP = sol* of RMP。</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt4-1.jpg" alt="part4-1"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt4-2.jpg" alt="part4-2"></p><p><strong>BD拓展：</strong><br>（1）被纳入候选集中的约束应满足约束力较弱，对解的结构会造成影响，但对目标值的影响不明显（若明显影响目标，将其不考虑到RMP内时，RMP的解大概率会违背该约束）；TSP中的破子环约束就类似，存在子环的解与不存在的解中边的个数一样，其明显影响解的结构，对目标值影响不明显。<br>（2）上述TSP模型中，候选集的约束来源于定义，实际求解过程中候选集可被不断更新，根据一定数学转换来形成加入RMP的约束，加速收敛速度，这一块在求解MIP的策略中使用较多，称为cutting plane。<br>（3）BD的思路与CG相似，因本身也是原问题与对偶问题的转换所带来的求解方式的改变，具体的细节可补充下运筹学对偶问题，做更深入的探究。<br>（4）……</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>算法的核心思想————分解（通过将求解一次大规模问题分解为求解若干个小问题的整合）</p></blockquote><h2 id="5-MIP-Solver-Core"><a href="#5-MIP-Solver-Core" class="headerlink" title="5.MIP Solver Core"></a>5.MIP Solver Core</h2><blockquote><p>上述提到的单纯形法适合解LP问题，但实际中很多问题的变量类型是整形的（IP，Integer Programming）或是混合类型（整形实形都存在，Mixed Integer Programming），求解该类问题的框架是怎样的呢？现存最优化求解器（GUROBI、CPLEX、LpSolve等）都支持直接将MIP模型输入，帮助求解，其内部核心的求解框架本章节会简要介绍一下。</p><h3 id="求解步骤"><a href="#求解步骤" class="headerlink" title="求解步骤"></a>求解步骤</h3><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt5-1.jpg" alt="part5-1"><br><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt5-2.jpg" alt="part5-2"></p><p>上述两张图是我自己的总结，其核心方法是分支定界法（BB，Branch and Bound），当问题规模较大时，就会在BB中嵌入CG或者Cutting Plane等算法，嵌入CG后成为分支定价法（BP，Branch and Price，再嵌入Cutting Plane后称为Branch and Price and Cut）。<br>大致求解步骤：<br>（1）对于一个IP问题，第一步做松弛（Relaxation，将决策变量必须为整形的约束放松为实数形）得到LP问题。<br>（2）用单纯形法求解LP问题得到solLp*（global optimal solution of LP），当问题规模较大时，单纯形外层套上Column Generation框架。<br>（3）判断solLp*中所有决策变量的值是否是整形，若为是，则该IP问题的解已被找到，有solIp* = solLp*（因为LP是IP的松弛问题，其最优解一定不会比原问题差）；若为否，则可考虑是否存在有效的cut（一条cut可看作为问题加上一条约束，切割解空间中的实数解空间，帮助LP的解尽可能与IP等价），每次加cut，都要重复求解LP并做判断工作。当解仍达不到全为整数且不存在有效的cut时，进入步骤4。<br>（4）此时回到分支定界的范围，为问题添加分支，将其划分成两个子节点（这里分支可以看作两条对立的约束，将解空间还分成两部分，如LP问题中某个决策变量x = 10.5，则分支约束可为x &lt;= 10及x &gt;= 11，原问题模型分别加上两个约束，形成两个子问题，即子节点）。<br>（5）子节点重复步骤1-3，但需不断更新自身的Bound，包括UB（Upper Bound）及LB（Lower Bound），这两者为问题的最优解限制了一个范围，即LB &lt;= sol* &lt;= UB；节点的UB一般是整个问题目前为止搜索到的最好的可行解（全部变量为整形），也可以是用启发式算法求得的可行解，无论什么方式，取最小；LB一般是松弛问题LP的解，也可以是其他方式，取最大值。对于某一节点，若UB &lt; LB时，则无继续搜索的必要，进行剪枝操作，若LB = UB则当前节点已经搜索完毕，得到可行解，用其更新整棵树（Branch and Bound可以看成树搜素过程）的UB，若LB &lt; UB，则进行步骤1-4的工作。<br>（6）当整棵树搜索完全时，即可得到global optimal of IP。</p><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt5-3.jpg" alt="part5-3"></p><h3 id="求解效率关键点分析"><a href="#求解效率关键点分析" class="headerlink" title="求解效率关键点分析"></a>求解效率关键点分析</h3><p>（1）分支策略的选择对求解效率影响较大，每次分支期望能平均划分解空间，这种思想类似于二分排序。<br>（2）好的cut（求出实数空间的同时，尽量保证约束所在的超平面覆盖整数解，因为单纯形法是沿着边进行搜索的）能保证LP的解尽可能接近IP，减少分支过程，加速求解。<br>（3）分支定界法的原型仍然是树搜索，那么节点的搜索顺序很重要，好的顺序能优先搜到较好的区域，得到较好的UB，加速剪枝过程，提高效率。<br>（4）每一个节点的bound确定方式较多，可根据问题特点特殊设计，加速收敛。<br>（5）……</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>为求得最优解，算法还是要考虑遍历所有的解空间，剪枝过程筛掉了其中不好的一部分，故整个框架加速了问题求解效率。现OR领域很多论文是自己实现分支定界框架，仅让优化器辅助LP问题的求解，而其创新点就是刚刚说明的影响求解效率关键点的设计；近几年兴起的Machine Learning结合OR的突破点也主要是融入这几步，这段时间也开始在做调研，后期的总结会再形成一篇博文。</p></blockquote><h2 id="6-GUROBI"><a href="#6-GUROBI" class="headerlink" title="6.GUROBI"></a>6.GUROBI</h2><blockquote><p><img src="/2017/10/28/Introduction-To-Operation-Research/ppt_images/ppt6-1.jpg" alt="part6-1"></p><p>GUROBI算是现阶段求解效率最高的最优化求解器，实习部门对其进行了采购，学习起来十分简单，官网上都有参考案例。<br>一旦建立好数学模型，coding过程就是一条条的将变量、目标、约束加入模型中，再运行solve()函数；当然，求解器也有很多进阶功能，如callback、multi-objective等，这些都有消息的参考文件，但一般情况下不会用到。</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习部门做的问题主要是供应链方向的优化，包括库存控制、排产调度、装箱装柜、物流优化等等，对于建立好的数学模型，现阶段使用的Solver是GUROBI，小组成员对于其中求解的原理较感兴趣（不至于完全将其当成黑箱使用），介于我是小组中唯一的OR方向（大部分是CS、统计方向），leader希望我对这一块做个详细的调研，并与某天做一次presentation。&lt;br&gt;为了形成体系化的讲解，对单纯形部分的理论知识进行了补充，结合16年暑假跟随华南理工的一位教授学习的MIP solver知识，用一些图将自己的理解形象的表示出来。最后展示效果不错，因此也在这里进行记录与分享。&lt;br&gt;展示内容包含一些我自身对知识的理解，如有错误，请随时提出。&lt;br&gt;内容知识涉及的参考文献、资料，都可以在我的github中documents项目中查询到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Simplex Method" scheme="http://yoursite.com/tags/Simplex-Method/"/>
    
      <category term="Column Generation" scheme="http://yoursite.com/tags/Column-Generation/"/>
    
      <category term="Bender Decomposition" scheme="http://yoursite.com/tags/Bender-Decomposition/"/>
    
      <category term="MIP Solver Core" scheme="http://yoursite.com/tags/MIP-Solver-Core/"/>
    
  </entry>
  
</feed>
